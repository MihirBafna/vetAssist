{"ast":null,"code":"/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;\n(function () {\n  'use strict'; // Used to determine if values are of the language type `Object`.\n\n  var objectTypes = {\n    'function': true,\n    'object': true\n  }; // Used as a reference to the global object.\n\n  var root = objectTypes[typeof window] && window || this; // Detect free variable `exports`.\n\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Detect free variable `module`.\n\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType; // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  } // Used to check objects for own properties.\n\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  /*--------------------------------------------------------------------------*/\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n    codePoint < 0 || // not a valid Unicode code point\n    codePoint > 0x10FFFF || // not a valid Unicode code point\n    Math.floor(codePoint) != codePoint // not an integer\n    ) {\n        throw RangeError('Invalid code point: ' + codePoint);\n      }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = codePoint % 0x400 + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n  /*--------------------------------------------------------------------------*/\n  // Ensures that nodes have the correct types.\n\n\n  var assertTypeRegexMap = {};\n\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected) ? assertTypeRegexMap[expected] : assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$');\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n  /*--------------------------------------------------------------------------*/\n  // Generates a regular expression string based on an AST.\n\n\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  } // Constructs a string by concatentating the output of each term.\n\n\n  function generateSequence(generator, terms) {\n    var i = -1,\n        length = terms.length,\n        result = '',\n        term;\n\n    while (++i < length) {\n      term = terms[i]; // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n\n      if (i + 1 < length && terms[i].type == 'value' && terms[i].kind == 'null' && terms[i + 1].type == 'value' && terms[i + 1].kind == 'symbol' && terms[i + 1].codePoint >= 48 && terms[i + 1].codePoint <= 57) {\n        result += '\\\\000';\n        continue;\n      }\n\n      result += generator(term);\n    }\n\n    return result;\n  }\n  /*--------------------------------------------------------------------------*/\n\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n    return generateSequence(generateTerm, node.body);\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n\n      case 'end':\n        return '$';\n\n      case 'boundary':\n        return '\\\\b';\n\n      case 'not-boundary':\n        return '\\\\B';\n\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n    return '[' + (node.negative ? '^' : '') + generateSequence(generateClassAtom, node.body) + ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n    var body = node.body,\n        i = -1,\n        length = body.length,\n        result = '';\n\n    while (++i < length) {\n      if (i != 0) {\n        result += '|';\n      }\n\n      result += generate(body[i]);\n    }\n\n    return result;\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n\n        break;\n\n      case 'ignore':\n        result += '?:';\n        break;\n\n      case 'lookahead':\n        result += '?=';\n        break;\n\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n\n      case 'lookbehind':\n        result += '?<=';\n        break;\n\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    result += generateSequence(generate, node.body);\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot');\n    return generate(node);\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n\n      case 'null':\n        return '\\\\' + codePoint;\n\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n\n          case 0x0009:\n            return '\\\\t';\n\n          case 0x000A:\n            return '\\\\n';\n\n          case 0x000B:\n            return '\\\\v';\n\n          case 0x000C:\n            return '\\\\f';\n\n          case 0x000D:\n            return '\\\\r';\n\n          case 0x002D:\n            return '\\\\-';\n\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n\n      case 'symbol':\n        return fromCodePoint(codePoint);\n\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n  /*--------------------------------------------------------------------------*/\n  // Used to generate strings for each node type.\n\n\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n  /*--------------------------------------------------------------------------*/\n  // Export regjsgen.\n\n  var regjsgen = {\n    'generate': generate\n  }; // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function () {\n      return regjsgen;\n    });\n    root.regjsgen = regjsgen;\n  } // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n      // Export for CommonJS support.\n      freeExports.generate = generate;\n    } else {\n      // Export to the global object.\n      root.regjsgen = regjsgen;\n    }\n}).call(this);","map":{"version":3,"sources":["/Users/MihirBafna/Downloads/volt-react-dashboard-v1.0.0/node_modules/regjsgen/regjsgen.js"],"names":["objectTypes","root","window","freeExports","exports","nodeType","hasFreeModule","module","freeGlobal","global","self","hasOwnProperty","Object","prototype","fromCodePoint","codePoint","Number","arguments","isFinite","Math","floor","RangeError","String","fromCharCode","highSurrogate","lowSurrogate","assertTypeRegexMap","assertType","type","expected","indexOf","Error","call","RegExp","test","generate","node","generators","generateSequence","generator","terms","i","length","result","term","kind","generateAlternative","generateTerm","body","generateAnchor","generateAtom","generateCharacterClass","negative","generateClassAtom","generateCharacterClassEscape","value","generateCharacterClassRange","min","max","generateDisjunction","generateDot","generateGroup","behavior","name","generateIdentifier","behaviour","generateQuantifier","quantifier","greedy","generateReference","matchIndex","generateUnicodePropertyEscape","generateValue","toString","toUpperCase","slice","regjsgen","define","amd"],"mappings":"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","sourcesContent":["/*!\n * regjsgen 0.5.2\n * Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>\n * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/master/LICENSE-MIT.txt>\n */\n;(function() {\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`.\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  // Used as a reference to the global object.\n  var root = (objectTypes[typeof window] && window) || this;\n\n  // Detect free variable `exports`.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Detect free variable `module`.\n  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;\n\n  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.\n  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Used to check objects for own properties.\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a string based on the given code point.\n  // Based on https://mths.be/fromcodepoint by @mathias.\n  function fromCodePoint() {\n    var codePoint = Number(arguments[0]);\n\n    if (\n      !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n      codePoint < 0 || // not a valid Unicode code point\n      codePoint > 0x10FFFF || // not a valid Unicode code point\n      Math.floor(codePoint) != codePoint // not an integer\n    ) {\n      throw RangeError('Invalid code point: ' + codePoint);\n    }\n\n    if (codePoint <= 0xFFFF) {\n      // BMP code point\n      return String.fromCharCode(codePoint);\n    } else {\n      // Astral code point; split in surrogate halves\n      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      codePoint -= 0x10000;\n      var highSurrogate = (codePoint >> 10) + 0xD800;\n      var lowSurrogate = (codePoint % 0x400) + 0xDC00;\n      return String.fromCharCode(highSurrogate, lowSurrogate);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Ensures that nodes have the correct types.\n  var assertTypeRegexMap = {};\n  function assertType(type, expected) {\n    if (expected.indexOf('|') == -1) {\n      if (type == expected) {\n        return;\n      }\n\n      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);\n    }\n\n    expected = hasOwnProperty.call(assertTypeRegexMap, expected)\n      ? assertTypeRegexMap[expected]\n      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'));\n\n    if (expected.test(type)) {\n      return;\n    }\n\n    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Generates a regular expression string based on an AST.\n  function generate(node) {\n    var type = node.type;\n\n    if (hasOwnProperty.call(generators, type)) {\n      return generators[type](node);\n    }\n\n    throw Error('Invalid node type: ' + type);\n  }\n\n  // Constructs a string by concatentating the output of each term.\n  function generateSequence(generator, terms) {\n    var i = -1,\n        length = terms.length,\n        result = '',\n        term;\n\n    while (++i < length) {\n      term = terms[i];\n\n      // Ensure that `\\0` null escapes followed by number symbols are not\n      // treated as backreferences.\n      if (\n        i + 1 < length &&\n        terms[i].type == 'value' &&\n        terms[i].kind == 'null' &&\n        terms[i + 1].type == 'value' &&\n        terms[i + 1].kind == 'symbol' &&\n        terms[i + 1].codePoint >= 48 &&\n        terms[i + 1].codePoint <= 57\n      ) {\n        result += '\\\\000';\n        continue;\n      }\n\n      result += generator(term);\n    }\n\n    return result;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  function generateAlternative(node) {\n    assertType(node.type, 'alternative');\n\n    return generateSequence(generateTerm, node.body);\n  }\n\n  function generateAnchor(node) {\n    assertType(node.type, 'anchor');\n\n    switch (node.kind) {\n      case 'start':\n        return '^';\n      case 'end':\n        return '$';\n      case 'boundary':\n        return '\\\\b';\n      case 'not-boundary':\n        return '\\\\B';\n      default:\n        throw Error('Invalid assertion');\n    }\n  }\n\n  function generateAtom(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');\n\n    return generate(node);\n  }\n\n  function generateCharacterClass(node) {\n    assertType(node.type, 'characterClass');\n\n    return '[' +\n      (node.negative ? '^' : '') +\n      generateSequence(generateClassAtom, node.body) +\n    ']';\n  }\n\n  function generateCharacterClassEscape(node) {\n    assertType(node.type, 'characterClassEscape');\n\n    return '\\\\' + node.value;\n  }\n\n  function generateCharacterClassRange(node) {\n    assertType(node.type, 'characterClassRange');\n\n    var min = node.min,\n        max = node.max;\n\n    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {\n      throw Error('Invalid character class range');\n    }\n\n    return generateClassAtom(min) + '-' + generateClassAtom(max);\n  }\n\n  function generateClassAtom(node) {\n    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');\n\n    return generate(node);\n  }\n\n  function generateDisjunction(node) {\n    assertType(node.type, 'disjunction');\n\n    var body = node.body,\n        i = -1,\n        length = body.length,\n        result = '';\n\n    while (++i < length) {\n      if (i != 0) {\n        result += '|';\n      }\n      result += generate(body[i]);\n    }\n\n    return result;\n  }\n\n  function generateDot(node) {\n    assertType(node.type, 'dot');\n\n    return '.';\n  }\n\n  function generateGroup(node) {\n    assertType(node.type, 'group');\n\n    var result = '';\n\n    switch (node.behavior) {\n      case 'normal':\n        if (node.name) {\n          result += '?<' + generateIdentifier(node.name) + '>';\n        }\n        break;\n      case 'ignore':\n        result += '?:';\n        break;\n      case 'lookahead':\n        result += '?=';\n        break;\n      case 'negativeLookahead':\n        result += '?!';\n        break;\n      case 'lookbehind':\n        result += '?<=';\n        break;\n      case 'negativeLookbehind':\n        result += '?<!';\n        break;\n      default:\n        throw Error('Invalid behaviour: ' + node.behaviour);\n    }\n\n    result += generateSequence(generate, node.body);\n\n    return '(' + result + ')';\n  }\n\n  function generateIdentifier(node) {\n    assertType(node.type, 'identifier');\n\n    return node.value;\n  }\n\n  function generateQuantifier(node) {\n    assertType(node.type, 'quantifier');\n\n    var quantifier = '',\n        min = node.min,\n        max = node.max;\n\n    if (max == null) {\n      if (min == 0) {\n        quantifier = '*';\n      } else if (min == 1) {\n        quantifier = '+';\n      } else {\n        quantifier = '{' + min + ',}';\n      }\n    } else if (min == max) {\n      quantifier = '{' + min + '}';\n    } else if (min == 0 && max == 1) {\n      quantifier = '?';\n    } else {\n      quantifier = '{' + min + ',' + max + '}';\n    }\n\n    if (!node.greedy) {\n      quantifier += '?';\n    }\n\n    return generateAtom(node.body[0]) + quantifier;\n  }\n\n  function generateReference(node) {\n    assertType(node.type, 'reference');\n\n    if (node.matchIndex) {\n      return '\\\\' + node.matchIndex;\n    }\n    if (node.name) {\n      return '\\\\k<' + generateIdentifier(node.name) + '>';\n    }\n\n    throw new Error('Unknown reference type');\n  }\n\n  function generateTerm(node) {\n    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|unicodePropertyEscape|value|dot');\n\n    return generate(node);\n  }\n\n  function generateUnicodePropertyEscape(node) {\n    assertType(node.type, 'unicodePropertyEscape');\n\n    return '\\\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';\n  }\n\n  function generateValue(node) {\n    assertType(node.type, 'value');\n\n    var kind = node.kind,\n        codePoint = node.codePoint;\n\n    if (typeof codePoint != 'number') {\n      throw new Error('Invalid code point: ' + codePoint);\n    }\n\n    switch (kind) {\n      case 'controlLetter':\n        return '\\\\c' + fromCodePoint(codePoint + 64);\n      case 'hexadecimalEscape':\n        return '\\\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);\n      case 'identifier':\n        return '\\\\' + fromCodePoint(codePoint);\n      case 'null':\n        return '\\\\' + codePoint;\n      case 'octal':\n        return '\\\\' + ('000' + codePoint.toString(8)).slice(-3);\n      case 'singleEscape':\n        switch (codePoint) {\n          case 0x0008:\n            return '\\\\b';\n          case 0x0009:\n            return '\\\\t';\n          case 0x000A:\n            return '\\\\n';\n          case 0x000B:\n            return '\\\\v';\n          case 0x000C:\n            return '\\\\f';\n          case 0x000D:\n            return '\\\\r';\n          case 0x002D:\n            return '\\\\-';\n          default:\n            throw Error('Invalid code point: ' + codePoint);\n        }\n      case 'symbol':\n        return fromCodePoint(codePoint);\n      case 'unicodeEscape':\n        return '\\\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);\n      case 'unicodeCodePointEscape':\n        return '\\\\u{' + codePoint.toString(16).toUpperCase() + '}';\n      default:\n        throw Error('Unsupported node kind: ' + kind);\n    }\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Used to generate strings for each node type.\n  var generators = {\n    'alternative': generateAlternative,\n    'anchor': generateAnchor,\n    'characterClass': generateCharacterClass,\n    'characterClassEscape': generateCharacterClassEscape,\n    'characterClassRange': generateCharacterClassRange,\n    'disjunction': generateDisjunction,\n    'dot': generateDot,\n    'group': generateGroup,\n    'quantifier': generateQuantifier,\n    'reference': generateReference,\n    'unicodePropertyEscape': generateUnicodePropertyEscape,\n    'value': generateValue\n  };\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export regjsgen.\n  var regjsgen = {\n    'generate': generate\n  };\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Define as an anonymous module so it can be aliased through path mapping.\n    define(function() {\n      return regjsgen;\n    });\n\n    root.regjsgen = regjsgen;\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && hasFreeModule) {\n    // Export for CommonJS support.\n    freeExports.generate = generate;\n  }\n  else {\n    // Export to the global object.\n    root.regjsgen = regjsgen;\n  }\n}.call(this));\n"]},"metadata":{},"sourceType":"script"}