{"ast":null,"code":"/**\n * SimpleBar.js - v5.3.0\n * Scrollbars, simpler.\n * https://grsmto.github.io/simplebar/\n *\n * Made by Adrien Denat from a fork by Jonathan Nicol\n * Under MIT License\n */\nimport throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport canUseDOM from 'can-use-dom';\nvar cachedScrollbarWidth = null;\nvar cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', function () {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nfunction scrollbarWidth() {\n  if (cachedScrollbarWidth === null) {\n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n\n    var body = document.body;\n    var box = document.createElement('div');\n    box.classList.add('simplebar-hide-scrollbar');\n    body.appendChild(box);\n    var width = box.getBoundingClientRect().right;\n    body.removeChild(box);\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n\nfunction getElementWindow(element) {\n  if (!element || !element.ownerDocument || !element.ownerDocument.defaultView) {\n    return window;\n  }\n\n  return element.ownerDocument.defaultView;\n}\n\nfunction getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n\n  return element.ownerDocument;\n}\n\nvar SimpleBar = /*#__PURE__*/function () {\n  function SimpleBar(element, options) {\n    var _this = this;\n\n    this.onScroll = function () {\n      var elWindow = getElementWindow(_this.el);\n\n      if (!_this.scrollXTicking) {\n        elWindow.requestAnimationFrame(_this.scrollX);\n        _this.scrollXTicking = true;\n      }\n\n      if (!_this.scrollYTicking) {\n        elWindow.requestAnimationFrame(_this.scrollY);\n        _this.scrollYTicking = true;\n      }\n    };\n\n    this.scrollX = function () {\n      if (_this.axis.x.isOverflowing) {\n        _this.showScrollbar('x');\n\n        _this.positionScrollbar('x');\n      }\n\n      _this.scrollXTicking = false;\n    };\n\n    this.scrollY = function () {\n      if (_this.axis.y.isOverflowing) {\n        _this.showScrollbar('y');\n\n        _this.positionScrollbar('y');\n      }\n\n      _this.scrollYTicking = false;\n    };\n\n    this.onMouseEnter = function () {\n      _this.showScrollbar('x');\n\n      _this.showScrollbar('y');\n    };\n\n    this.onMouseMove = function (e) {\n      _this.mouseX = e.clientX;\n      _this.mouseY = e.clientY;\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseMoveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseMoveForAxis('y');\n      }\n    };\n\n    this.onMouseLeave = function () {\n      _this.onMouseMove.cancel();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        _this.onMouseLeaveForAxis('x');\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        _this.onMouseLeaveForAxis('y');\n      }\n\n      _this.mouseX = -1;\n      _this.mouseY = -1;\n    };\n\n    this.onWindowResize = function () {\n      // Recalculate scrollbarWidth in case it's a zoom\n      _this.scrollbarWidth = _this.getScrollbarWidth();\n\n      _this.hideNativeScrollbar();\n    };\n\n    this.hideScrollbars = function () {\n      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n      if (!_this.isWithinBounds(_this.axis.y.track.rect)) {\n        _this.axis.y.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.y.isVisible = false;\n      }\n\n      if (!_this.isWithinBounds(_this.axis.x.track.rect)) {\n        _this.axis.x.scrollbar.el.classList.remove(_this.classNames.visible);\n\n        _this.axis.x.isVisible = false;\n      }\n    };\n\n    this.onPointerEvent = function (e) {\n      var isWithinTrackXBounds, isWithinTrackYBounds;\n      _this.axis.x.track.rect = _this.axis.x.track.el.getBoundingClientRect();\n      _this.axis.y.track.rect = _this.axis.y.track.el.getBoundingClientRect();\n\n      if (_this.axis.x.isOverflowing || _this.axis.x.forceVisible) {\n        isWithinTrackXBounds = _this.isWithinBounds(_this.axis.x.track.rect);\n      }\n\n      if (_this.axis.y.isOverflowing || _this.axis.y.forceVisible) {\n        isWithinTrackYBounds = _this.isWithinBounds(_this.axis.y.track.rect);\n      } // If any pointer event is called on the scrollbar\n\n\n      if (isWithinTrackXBounds || isWithinTrackYBounds) {\n        // Preventing the event's default action stops text being\n        // selectable during the drag.\n        e.preventDefault(); // Prevent event leaking\n\n        e.stopPropagation();\n\n        if (e.type === 'mousedown') {\n          if (isWithinTrackXBounds) {\n            _this.axis.x.scrollbar.rect = _this.axis.x.scrollbar.el.getBoundingClientRect();\n\n            if (_this.isWithinBounds(_this.axis.x.scrollbar.rect)) {\n              _this.onDragStart(e, 'x');\n            } else {\n              _this.onTrackClick(e, 'x');\n            }\n          }\n\n          if (isWithinTrackYBounds) {\n            _this.axis.y.scrollbar.rect = _this.axis.y.scrollbar.el.getBoundingClientRect();\n\n            if (_this.isWithinBounds(_this.axis.y.scrollbar.rect)) {\n              _this.onDragStart(e, 'y');\n            } else {\n              _this.onTrackClick(e, 'y');\n            }\n          }\n        }\n      }\n    };\n\n    this.drag = function (e) {\n      var eventOffset;\n      var track = _this.axis[_this.draggedAxis].track;\n      var trackSize = track.rect[_this.axis[_this.draggedAxis].sizeAttr];\n      var scrollbar = _this.axis[_this.draggedAxis].scrollbar;\n      var contentSize = _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollSizeAttr];\n      var hostSize = parseInt(_this.elStyles[_this.axis[_this.draggedAxis].sizeAttr], 10);\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (_this.draggedAxis === 'y') {\n        eventOffset = e.pageY;\n      } else {\n        eventOffset = e.pageX;\n      } // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n\n\n      var dragPos = eventOffset - track.rect[_this.axis[_this.draggedAxis].offsetAttr] - _this.axis[_this.draggedAxis].dragOffset; // Convert the mouse position into a percentage of the scrollbar height/width.\n\n      var dragPerc = dragPos / (trackSize - scrollbar.size); // Scroll the content by the same percentage.\n\n      var scrollPos = dragPerc * (contentSize - hostSize); // Fix browsers inconsistency on RTL\n\n      if (_this.draggedAxis === 'x') {\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? scrollPos - (trackSize + scrollbar.size) : scrollPos;\n        scrollPos = _this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollPos : scrollPos;\n      }\n\n      _this.contentWrapperEl[_this.axis[_this.draggedAxis].scrollOffsetAttr] = scrollPos;\n    };\n\n    this.onEndDrag = function (e) {\n      var elDocument = getElementDocument(_this.el);\n      var elWindow = getElementWindow(_this.el);\n      e.preventDefault();\n      e.stopPropagation();\n\n      _this.el.classList.remove(_this.classNames.dragging);\n\n      elDocument.removeEventListener('mousemove', _this.drag, true);\n      elDocument.removeEventListener('mouseup', _this.onEndDrag, true);\n      _this.removePreventClickId = elWindow.setTimeout(function () {\n        // Remove these asynchronously so we still suppress click events\n        // generated simultaneously with mouseup.\n        elDocument.removeEventListener('click', _this.preventClick, true);\n        elDocument.removeEventListener('dblclick', _this.preventClick, true);\n        _this.removePreventClickId = null;\n      });\n    };\n\n    this.preventClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    };\n\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.options = Object.assign({}, SimpleBar.defaultOptions, {}, options);\n    this.classNames = Object.assign({}, SimpleBar.defaultOptions.classNames, {}, this.options.classNames);\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null; // Don't re-instantiate over an existing one\n\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(this.hideScrollbars.bind(this), this.options.timeout);\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n    this.init();\n  }\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n\n\n  SimpleBar.getRtlHelpers = function getRtlHelpers() {\n    var dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML = '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    var scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    var dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    var dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    var dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    var dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(dummyContainerChild);\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left && dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left !== 0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted: dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  };\n\n  SimpleBar.getOffset = function getOffset(el) {\n    var rect = el.getBoundingClientRect();\n    var elDocument = getElementDocument(el);\n    var elWindow = getElementWindow(el);\n    return {\n      top: rect.top + (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left: rect.left + (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n    };\n  };\n\n  var _proto = SimpleBar.prototype;\n\n  _proto.init = function init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this); // We stop here on server-side\n\n    if (canUseDOM) {\n      this.initDOM();\n      this.scrollbarWidth = this.getScrollbarWidth();\n      this.recalculate();\n      this.initListeners();\n    }\n  };\n\n  _proto.initDOM = function initDOM() {\n    var _this2 = this; // make sure this element doesn't have the elements yet\n\n\n    if (Array.prototype.filter.call(this.el.children, function (child) {\n      return child.classList.contains(_this2.classNames.wrapper);\n    }).length) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(\".\" + this.classNames.wrapper);\n      this.contentWrapperEl = this.options.scrollableNode || this.el.querySelector(\".\" + this.classNames.contentWrapper);\n      this.contentEl = this.options.contentNode || this.el.querySelector(\".\" + this.classNames.contentEl);\n      this.offsetEl = this.el.querySelector(\".\" + this.classNames.offset);\n      this.maskEl = this.el.querySelector(\".\" + this.classNames.mask);\n      this.placeholderEl = this.findChild(this.wrapperEl, \".\" + this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl = this.el.querySelector(\".\" + this.classNames.heightAutoObserverEl);\n      this.axis.x.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.horizontal);\n      this.axis.y.track.el = this.findChild(this.el, \".\" + this.classNames.track + \".\" + this.classNames.vertical);\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl);\n      this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      var track = document.createElement('div');\n      var scrollbar = document.createElement('div');\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n      track.appendChild(scrollbar);\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\".\" + this.classNames.scrollbar);\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\".\" + this.classNames.scrollbar);\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  };\n\n  _proto.initListeners = function initListeners() {\n    var _this3 = this;\n\n    var elWindow = getElementWindow(this.el); // Event listeners\n\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this3.el.addEventListener(e, _this3.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll); // Browser zoom triggers a window resize\n\n    elWindow.addEventListener('resize', this.onWindowResize); // Hack for https://github.com/WICG/ResizeObserver/issues/38\n\n    var resizeObserverStarted = false;\n    var resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n    this.resizeObserver = new resizeObserver(function () {\n      if (!resizeObserverStarted) return;\n\n      _this3.recalculate();\n    });\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n    elWindow.requestAnimationFrame(function () {\n      resizeObserverStarted = true;\n    }); // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n\n    this.mutationObserver = new elWindow.MutationObserver(this.recalculate);\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  };\n\n  _proto.recalculate = function recalculate() {\n    var elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n    var isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    var isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n    var contentElOffsetWidth = this.contentEl.offsetWidth;\n    var contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n    var elOverflowX = this.elStyles.overflowX;\n    var elOverflowY = this.elStyles.overflowY;\n    this.contentEl.style.padding = this.elStyles.paddingTop + \" \" + this.elStyles.paddingRight + \" \" + this.elStyles.paddingBottom + \" \" + this.elStyles.paddingLeft;\n    this.wrapperEl.style.margin = \"-\" + this.elStyles.paddingTop + \" -\" + this.elStyles.paddingRight + \" -\" + this.elStyles.paddingBottom + \" -\" + this.elStyles.paddingLeft;\n    var contentElScrollHeight = this.contentEl.scrollHeight;\n    var contentElScrollWidth = this.contentEl.scrollWidth;\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%'; // Determine placeholder size\n\n    this.placeholderEl.style.width = isWidthAuto ? contentElOffsetWidth + \"px\" : 'auto';\n    this.placeholderEl.style.height = contentElScrollHeight + \"px\";\n    var contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n    this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing = contentElScrollHeight > contentWrapperElOffsetHeight; // Set isOverflowing to false if user explicitely set hidden overflow\n\n    this.axis.x.isOverflowing = elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing = elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n    this.axis.x.forceVisible = this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible = this.options.forceVisible === 'y' || this.options.forceVisible === true;\n    this.hideNativeScrollbar(); // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n\n    var offsetForXScrollbar = this.axis.x.isOverflowing ? this.scrollbarWidth : 0;\n    var offsetForYScrollbar = this.axis.y.isOverflowing ? this.scrollbarWidth : 0;\n    this.axis.x.isOverflowing = this.axis.x.isOverflowing && contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing = this.axis.y.isOverflowing && contentElScrollHeight > contentWrapperElOffsetHeight - offsetForXScrollbar;\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n    this.axis.x.scrollbar.el.style.width = this.axis.x.scrollbar.size + \"px\";\n    this.axis.y.scrollbar.el.style.height = this.axis.y.scrollbar.size + \"px\";\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n  /**\n   * Calculate scrollbar size\n   */\n  ;\n\n  _proto.getScrollbarSize = function getScrollbarSize(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    var contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    var scrollbarSize;\n    var scrollbarRatio = trackSize / contentSize; // Calculate new height/position of drag handle.\n\n    scrollbarSize = Math.max(~~(scrollbarRatio * trackSize), this.options.scrollbarMinSize);\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  };\n\n  _proto.positionScrollbar = function positionScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    var contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    var trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    var scrollbar = this.axis[axis].scrollbar;\n    var scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted ? -scrollOffset : scrollOffset;\n    var scrollPourcent = scrollOffset / (contentSize - hostSize);\n    var handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset = axis === 'x' && this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted ? handleOffset + (trackSize - scrollbar.size) : handleOffset;\n    scrollbar.el.style.transform = axis === 'x' ? \"translate3d(\" + handleOffset + \"px, 0, 0)\" : \"translate3d(0, \" + handleOffset + \"px, 0)\";\n  };\n\n  _proto.toggleTrackVisibility = function toggleTrackVisibility(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var track = this.axis[axis].track.el;\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    } // Even if forceVisible is enabled, scrollbar itself should be hidden\n\n\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  };\n\n  _proto.hideNativeScrollbar = function hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] = this.axis.y.isOverflowing || this.axis.y.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n    this.offsetEl.style.bottom = this.axis.x.isOverflowing || this.axis.x.forceVisible ? \"-\" + this.scrollbarWidth + \"px\" : 0;\n  }\n  /**\n   * On scroll event handling\n   */\n  ;\n\n  _proto.onMouseMoveForAxis = function onMouseMoveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.rect = this.axis[axis].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    var isWithinScrollbarBoundsX = this.isWithinBounds(this.axis[axis].scrollbar.rect);\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  };\n\n  _proto.onMouseLeaveForAxis = function onMouseLeaveForAxis(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  };\n  /**\n   * Show scrollbar\n   */\n\n\n  _proto.showScrollbar = function showScrollbar(axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n  /**\n   * Hide Scrollbar\n   */\n  ;\n  /**\n   * on scrollbar handle drag movement starts\n   */\n\n\n  _proto.onDragStart = function onDragStart(e, axis) {\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    var elDocument = getElementDocument(this.el);\n    var elWindow = getElementWindow(this.el);\n    var scrollbar = this.axis[axis].scrollbar; // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n\n    var eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset = eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n    this.el.classList.add(this.classNames.dragging);\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n  /**\n   * Drag scrollbar handle\n   */\n  ;\n\n  _proto.onTrackClick = function onTrackClick(e, axis) {\n    var _this4 = this;\n\n    if (axis === void 0) {\n      axis = 'y';\n    }\n\n    if (!this.options.clickOnTrack) return;\n    var elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[axis].scrollbar.el.getBoundingClientRect();\n    var scrollbar = this.axis[axis].scrollbar;\n    var scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    var hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    var scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    var t = axis === 'y' ? this.mouseY - scrollbarOffset : this.mouseX - scrollbarOffset;\n    var dir = t < 0 ? -1 : 1;\n    var scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n\n    var scrollTo = function scrollTo() {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          var _this4$contentWrapper;\n\n          scrolled -= _this4.options.clickOnTrackSpeed;\n\n          _this4.contentWrapperEl.scrollTo((_this4$contentWrapper = {}, _this4$contentWrapper[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper));\n\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          var _this4$contentWrapper2;\n\n          scrolled += _this4.options.clickOnTrackSpeed;\n\n          _this4.contentWrapperEl.scrollTo((_this4$contentWrapper2 = {}, _this4$contentWrapper2[_this4.axis[axis].offsetAttr] = scrolled, _this4$contentWrapper2));\n\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      }\n    };\n\n    scrollTo();\n  }\n  /**\n   * Getter for content element\n   */\n  ;\n\n  _proto.getContentElement = function getContentElement() {\n    return this.contentEl;\n  }\n  /**\n   * Getter for original scrolling element\n   */\n  ;\n\n  _proto.getScrollElement = function getScrollElement() {\n    return this.contentWrapperEl;\n  };\n\n  _proto.getScrollbarWidth = function getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar').display === 'none' || 'scrollbarWidth' in document.documentElement.style || '-ms-overflow-style' in document.documentElement.style) {\n        return 0;\n      } else {\n        return scrollbarWidth();\n      }\n    } catch (e) {\n      return scrollbarWidth();\n    }\n  };\n\n  _proto.removeListeners = function removeListeners() {\n    var _this5 = this;\n\n    var elWindow = getElementWindow(this.el); // Event listeners\n\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(function (e) {\n      _this5.el.removeEventListener(e, _this5.onPointerEvent, true);\n    });\n    ['touchstart', 'touchend', 'touchmove'].forEach(function (e) {\n      _this5.el.removeEventListener(e, _this5.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    if (this.contentWrapperEl) {\n      this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    }\n\n    elWindow.removeEventListener('resize', this.onWindowResize);\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    } // Cancel all debounced functions\n\n\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  ;\n\n  _proto.unMount = function unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n  /**\n   * Check if mouse is within bounds\n   */\n  ;\n\n  _proto.isWithinBounds = function isWithinBounds(bbox) {\n    return this.mouseX >= bbox.left && this.mouseX <= bbox.left + bbox.width && this.mouseY >= bbox.top && this.mouseY <= bbox.top + bbox.height;\n  }\n  /**\n   * Find element children matches query\n   */\n  ;\n\n  _proto.findChild = function findChild(el, query) {\n    var matches = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, function (child) {\n      return matches.call(child, query);\n    })[0];\n  };\n\n  return SimpleBar;\n}();\n\nSimpleBar.defaultOptions = {\n  autoHide: true,\n  forceVisible: false,\n  clickOnTrack: true,\n  clickOnTrackSpeed: 40,\n  classNames: {\n    contentEl: 'simplebar-content',\n    contentWrapper: 'simplebar-content-wrapper',\n    offset: 'simplebar-offset',\n    mask: 'simplebar-mask',\n    wrapper: 'simplebar-wrapper',\n    placeholder: 'simplebar-placeholder',\n    scrollbar: 'simplebar-scrollbar',\n    track: 'simplebar-track',\n    heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n    heightAutoObserverEl: 'simplebar-height-auto-observer',\n    visible: 'simplebar-visible',\n    horizontal: 'simplebar-horizontal',\n    vertical: 'simplebar-vertical',\n    hover: 'simplebar-hover',\n    dragging: 'simplebar-dragging'\n  },\n  scrollbarMinSize: 25,\n  scrollbarMaxSize: 0,\n  timeout: 1000\n};\nSimpleBar.instances = new WeakMap();\nexport default SimpleBar;","map":{"version":3,"sources":["../src/scrollbar-width.js","../src/helpers.js","../src/simplebar.js"],"names":["cachedScrollbarWidth","cachedDevicePixelRatio","window","body","document","box","width","element","SimpleBar","x","scrollOffsetAttr","sizeAttr","scrollSizeAttr","offsetSizeAttr","offsetAttr","overflowAttr","dragOffset","isOverflowing","isVisible","forceVisible","track","scrollbar","y","throttle","debounce","leading","memoize","getRtlHelpers","dummyDiv","scrollbarDummyEl","dummyContainerChild","dummyContainerOffset","dummyContainerChildOffset","dummyContainerScrollOffsetAfterScroll","isRtlScrollingInverted","isRtlScrollbarInverted","left","defaultOptions","autoHide","clickOnTrack","clickOnTrackSpeed","classNames","contentEl","contentWrapper","offset","mask","wrapper","placeholder","heightAutoObserverWrapperEl","heightAutoObserverEl","visible","horizontal","vertical","hover","dragging","scrollbarMinSize","scrollbarMaxSize","timeout","getOffset","rect","el","elDocument","getElementDocument","elWindow","getElementWindow","top","instances","init","initDOM","child","initListeners","capture","passive","resizeObserverStarted","resizeObserver","childList","subtree","characterData","recalculate","isHeightAuto","isWidthAuto","contentElOffsetWidth","contentWrapperElOffsetWidth","elOverflowX","elOverflowY","contentElScrollHeight","contentElScrollWidth","contentWrapperElOffsetHeight","offsetForXScrollbar","offsetForYScrollbar","getScrollbarSize","axis","contentSize","trackSize","scrollbarRatio","scrollbarSize","Math","positionScrollbar","hostSize","parseInt","scrollOffset","scrollPourcent","handleOffset","toggleTrackVisibility","hideNativeScrollbar","e","onMouseMoveForAxis","isWithinScrollbarBoundsX","onMouseLeaveForAxis","showScrollbar","isWithinTrackXBounds","isWithinTrackYBounds","onDragStart","eventOffset","dragPos","dragPerc","scrollPos","onTrackClick","scrollbarOffset","scrolled","t","dir","scrollSize","scrollTo","getContentElement","getScrollElement","getScrollbarWidth","getComputedStyle","scrollbarWidth","removeListeners","unMount","isWithinBounds","bbox","findChild","matches"],"mappings":"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","sourcesContent":["import canUseDOM from 'can-use-dom';\n\nlet cachedScrollbarWidth = null;\nlet cachedDevicePixelRatio = null;\n\nif (canUseDOM) {\n  window.addEventListener('resize', () => {\n    if (cachedDevicePixelRatio !== window.devicePixelRatio) {\n      cachedDevicePixelRatio = window.devicePixelRatio;\n      cachedScrollbarWidth = null;\n    }\n  });\n}\n\nexport default function scrollbarWidth() {\n  if (cachedScrollbarWidth === null) {\n    if (typeof document === 'undefined') {\n      cachedScrollbarWidth = 0;\n      return cachedScrollbarWidth;\n    }\n\n    const body = document.body;\n    const box = document.createElement('div');\n\n    box.classList.add('simplebar-hide-scrollbar');\n\n    body.appendChild(box);\n\n    const width = box.getBoundingClientRect().right;\n\n    body.removeChild(box);\n\n    cachedScrollbarWidth = width;\n  }\n\n  return cachedScrollbarWidth;\n}\n","// Helper function to retrieve options from element attributes\nexport const getOptions = function(obj) {\n  const options = Array.prototype.reduce.call(\n    obj,\n    (acc, attribute) => {\n      const option = attribute.name.match(/data-simplebar-(.+)/);\n      if (option) {\n        const key = option[1].replace(/\\W+(.)/g, (x, chr) => chr.toUpperCase());\n        switch (attribute.value) {\n          case 'true':\n            acc[key] = true;\n            break;\n          case 'false':\n            acc[key] = false;\n            break;\n          case undefined:\n            acc[key] = true;\n            break;\n          default:\n            acc[key] = attribute.value;\n        }\n      }\n      return acc;\n    },\n    {}\n  );\n  return options;\n};\n\nexport function getElementWindow(element) {\n  if (\n    !element ||\n    !element.ownerDocument ||\n    !element.ownerDocument.defaultView\n  ) {\n    return window;\n  }\n  return element.ownerDocument.defaultView;\n}\n\nexport function getElementDocument(element) {\n  if (!element || !element.ownerDocument) {\n    return document;\n  }\n  return element.ownerDocument;\n}\n","import throttle from 'lodash.throttle';\nimport debounce from 'lodash.debounce';\nimport memoize from 'lodash.memoize';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport canUseDOM from 'can-use-dom';\nimport scrollbarWidth from './scrollbar-width';\nimport { getElementWindow, getElementDocument } from './helpers';\n\nexport default class SimpleBar {\n  constructor(element, options) {\n    this.el = element;\n    this.minScrollbarWidth = 20;\n    this.options = { ...SimpleBar.defaultOptions, ...options };\n    this.classNames = {\n      ...SimpleBar.defaultOptions.classNames,\n      ...this.options.classNames\n    };\n    this.axis = {\n      x: {\n        scrollOffsetAttr: 'scrollLeft',\n        sizeAttr: 'width',\n        scrollSizeAttr: 'scrollWidth',\n        offsetSizeAttr: 'offsetWidth',\n        offsetAttr: 'left',\n        overflowAttr: 'overflowX',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      },\n      y: {\n        scrollOffsetAttr: 'scrollTop',\n        sizeAttr: 'height',\n        scrollSizeAttr: 'scrollHeight',\n        offsetSizeAttr: 'offsetHeight',\n        offsetAttr: 'top',\n        overflowAttr: 'overflowY',\n        dragOffset: 0,\n        isOverflowing: true,\n        isVisible: false,\n        forceVisible: false,\n        track: {},\n        scrollbar: {}\n      }\n    };\n    this.removePreventClickId = null;\n\n    // Don't re-instantiate over an existing one\n    if (SimpleBar.instances.has(this.el)) {\n      return;\n    }\n\n    this.recalculate = throttle(this.recalculate.bind(this), 64);\n    this.onMouseMove = throttle(this.onMouseMove.bind(this), 64);\n    this.hideScrollbars = debounce(\n      this.hideScrollbars.bind(this),\n      this.options.timeout\n    );\n    this.onWindowResize = debounce(this.onWindowResize.bind(this), 64, {\n      leading: true\n    });\n\n    SimpleBar.getRtlHelpers = memoize(SimpleBar.getRtlHelpers);\n\n    this.init();\n  }\n\n  /**\n   * Static properties\n   */\n\n  /**\n   * Helper to fix browsers inconsistency on RTL:\n   *  - Firefox inverts the scrollbar initial position\n   *  - IE11 inverts both scrollbar position and scrolling offset\n   * Directly inspired by @KingSora's OverlayScrollbars https://github.com/KingSora/OverlayScrollbars/blob/master/js/OverlayScrollbars.js#L1634\n   */\n  static getRtlHelpers() {\n    const dummyDiv = document.createElement('div');\n    dummyDiv.innerHTML =\n      '<div class=\"hs-dummy-scrollbar-size\"><div style=\"height: 200%; width: 200%; margin: 10px 0;\"></div></div>';\n    const scrollbarDummyEl = dummyDiv.firstElementChild;\n    document.body.appendChild(scrollbarDummyEl);\n    const dummyContainerChild = scrollbarDummyEl.firstElementChild;\n    scrollbarDummyEl.scrollLeft = 0;\n    const dummyContainerOffset = SimpleBar.getOffset(scrollbarDummyEl);\n    const dummyContainerChildOffset = SimpleBar.getOffset(dummyContainerChild);\n    scrollbarDummyEl.scrollLeft = 999;\n    const dummyContainerScrollOffsetAfterScroll = SimpleBar.getOffset(\n      dummyContainerChild\n    );\n\n    return {\n      // determines if the scrolling is responding with negative values\n      isRtlScrollingInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left &&\n        dummyContainerChildOffset.left -\n          dummyContainerScrollOffsetAfterScroll.left !==\n          0,\n      // determines if the origin scrollbar position is inverted or not (positioned on left or right)\n      isRtlScrollbarInverted:\n        dummyContainerOffset.left !== dummyContainerChildOffset.left\n    };\n  }\n\n  static defaultOptions = {\n    autoHide: true,\n    forceVisible: false,\n    clickOnTrack: true,\n    clickOnTrackSpeed: 40,\n    classNames: {\n      contentEl: 'simplebar-content',\n      contentWrapper: 'simplebar-content-wrapper',\n      offset: 'simplebar-offset',\n      mask: 'simplebar-mask',\n      wrapper: 'simplebar-wrapper',\n      placeholder: 'simplebar-placeholder',\n      scrollbar: 'simplebar-scrollbar',\n      track: 'simplebar-track',\n      heightAutoObserverWrapperEl: 'simplebar-height-auto-observer-wrapper',\n      heightAutoObserverEl: 'simplebar-height-auto-observer',\n      visible: 'simplebar-visible',\n      horizontal: 'simplebar-horizontal',\n      vertical: 'simplebar-vertical',\n      hover: 'simplebar-hover',\n      dragging: 'simplebar-dragging'\n    },\n    scrollbarMinSize: 25,\n    scrollbarMaxSize: 0,\n    timeout: 1000\n  };\n\n  static getOffset(el) {\n    const rect = el.getBoundingClientRect();\n    const elDocument = getElementDocument(el);\n    const elWindow = getElementWindow(el);\n\n    return {\n      top:\n        rect.top +\n        (elWindow.pageYOffset || elDocument.documentElement.scrollTop),\n      left:\n        rect.left +\n        (elWindow.pageXOffset || elDocument.documentElement.scrollLeft)\n    };\n  }\n\n  static instances = new WeakMap();\n\n  init() {\n    // Save a reference to the instance, so we know this DOM node has already been instancied\n    SimpleBar.instances.set(this.el, this);\n\n    // We stop here on server-side\n    if (canUseDOM) {\n      this.initDOM();\n\n      this.scrollbarWidth = this.getScrollbarWidth();\n\n      this.recalculate();\n\n      this.initListeners();\n    }\n  }\n\n  initDOM() {\n    // make sure this element doesn't have the elements yet\n    if (\n      Array.prototype.filter.call(this.el.children, child =>\n        child.classList.contains(this.classNames.wrapper)\n      ).length\n    ) {\n      // assume that element has his DOM already initiated\n      this.wrapperEl = this.el.querySelector(`.${this.classNames.wrapper}`);\n      this.contentWrapperEl =\n        this.options.scrollableNode ||\n        this.el.querySelector(`.${this.classNames.contentWrapper}`);\n      this.contentEl =\n        this.options.contentNode ||\n        this.el.querySelector(`.${this.classNames.contentEl}`);\n\n      this.offsetEl = this.el.querySelector(`.${this.classNames.offset}`);\n      this.maskEl = this.el.querySelector(`.${this.classNames.mask}`);\n\n      this.placeholderEl = this.findChild(\n        this.wrapperEl,\n        `.${this.classNames.placeholder}`\n      );\n      this.heightAutoObserverWrapperEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverWrapperEl}`\n      );\n      this.heightAutoObserverEl = this.el.querySelector(\n        `.${this.classNames.heightAutoObserverEl}`\n      );\n      this.axis.x.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.horizontal}`\n      );\n      this.axis.y.track.el = this.findChild(\n        this.el,\n        `.${this.classNames.track}.${this.classNames.vertical}`\n      );\n    } else {\n      // Prepare DOM\n      this.wrapperEl = document.createElement('div');\n      this.contentWrapperEl = document.createElement('div');\n      this.offsetEl = document.createElement('div');\n      this.maskEl = document.createElement('div');\n      this.contentEl = document.createElement('div');\n      this.placeholderEl = document.createElement('div');\n      this.heightAutoObserverWrapperEl = document.createElement('div');\n      this.heightAutoObserverEl = document.createElement('div');\n\n      this.wrapperEl.classList.add(this.classNames.wrapper);\n      this.contentWrapperEl.classList.add(this.classNames.contentWrapper);\n      this.offsetEl.classList.add(this.classNames.offset);\n      this.maskEl.classList.add(this.classNames.mask);\n      this.contentEl.classList.add(this.classNames.contentEl);\n      this.placeholderEl.classList.add(this.classNames.placeholder);\n      this.heightAutoObserverWrapperEl.classList.add(\n        this.classNames.heightAutoObserverWrapperEl\n      );\n      this.heightAutoObserverEl.classList.add(\n        this.classNames.heightAutoObserverEl\n      );\n\n      while (this.el.firstChild) {\n        this.contentEl.appendChild(this.el.firstChild);\n      }\n\n      this.contentWrapperEl.appendChild(this.contentEl);\n      this.offsetEl.appendChild(this.contentWrapperEl);\n      this.maskEl.appendChild(this.offsetEl);\n      this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl);\n      this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl);\n      this.wrapperEl.appendChild(this.maskEl);\n      this.wrapperEl.appendChild(this.placeholderEl);\n      this.el.appendChild(this.wrapperEl);\n    }\n\n    if (!this.axis.x.track.el || !this.axis.y.track.el) {\n      const track = document.createElement('div');\n      const scrollbar = document.createElement('div');\n\n      track.classList.add(this.classNames.track);\n      scrollbar.classList.add(this.classNames.scrollbar);\n\n      track.appendChild(scrollbar);\n\n      this.axis.x.track.el = track.cloneNode(true);\n      this.axis.x.track.el.classList.add(this.classNames.horizontal);\n\n      this.axis.y.track.el = track.cloneNode(true);\n      this.axis.y.track.el.classList.add(this.classNames.vertical);\n\n      this.el.appendChild(this.axis.x.track.el);\n      this.el.appendChild(this.axis.y.track.el);\n    }\n\n    this.axis.x.scrollbar.el = this.axis.x.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n    this.axis.y.scrollbar.el = this.axis.y.track.el.querySelector(\n      `.${this.classNames.scrollbar}`\n    );\n\n    if (!this.options.autoHide) {\n      this.axis.x.scrollbar.el.classList.add(this.classNames.visible);\n      this.axis.y.scrollbar.el.classList.add(this.classNames.visible);\n    }\n\n    this.el.setAttribute('data-simplebar', 'init');\n  }\n\n  initListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.addEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.addEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.addEventListener('mousemove', this.onMouseMove);\n    this.el.addEventListener('mouseleave', this.onMouseLeave);\n\n    this.contentWrapperEl.addEventListener('scroll', this.onScroll);\n\n    // Browser zoom triggers a window resize\n    elWindow.addEventListener('resize', this.onWindowResize);\n\n    // Hack for https://github.com/WICG/ResizeObserver/issues/38\n    let resizeObserverStarted = false;\n    const resizeObserver = elWindow.ResizeObserver || ResizeObserver;\n    this.resizeObserver = new resizeObserver(() => {\n      if (!resizeObserverStarted) return;\n      this.recalculate();\n    });\n\n    this.resizeObserver.observe(this.el);\n    this.resizeObserver.observe(this.contentEl);\n\n    elWindow.requestAnimationFrame(() => {\n      resizeObserverStarted = true;\n    });\n\n    // This is required to detect horizontal scroll. Vertical scroll only needs the resizeObserver.\n    this.mutationObserver = new elWindow.MutationObserver(this.recalculate);\n\n    this.mutationObserver.observe(this.contentEl, {\n      childList: true,\n      subtree: true,\n      characterData: true\n    });\n  }\n\n  recalculate() {\n    const elWindow = getElementWindow(this.el);\n    this.elStyles = elWindow.getComputedStyle(this.el);\n    this.isRtl = this.elStyles.direction === 'rtl';\n\n    const isHeightAuto = this.heightAutoObserverEl.offsetHeight <= 1;\n    const isWidthAuto = this.heightAutoObserverEl.offsetWidth <= 1;\n    const contentElOffsetWidth = this.contentEl.offsetWidth;\n\n    const contentWrapperElOffsetWidth = this.contentWrapperEl.offsetWidth;\n\n    const elOverflowX = this.elStyles.overflowX;\n    const elOverflowY = this.elStyles.overflowY;\n\n    this.contentEl.style.padding = `${this.elStyles.paddingTop} ${this.elStyles.paddingRight} ${this.elStyles.paddingBottom} ${this.elStyles.paddingLeft}`;\n    this.wrapperEl.style.margin = `-${this.elStyles.paddingTop} -${this.elStyles.paddingRight} -${this.elStyles.paddingBottom} -${this.elStyles.paddingLeft}`;\n\n    const contentElScrollHeight = this.contentEl.scrollHeight;\n    const contentElScrollWidth = this.contentEl.scrollWidth;\n\n    this.contentWrapperEl.style.height = isHeightAuto ? 'auto' : '100%';\n\n    // Determine placeholder size\n    this.placeholderEl.style.width = isWidthAuto\n      ? `${contentElOffsetWidth}px`\n      : 'auto';\n    this.placeholderEl.style.height = `${contentElScrollHeight}px`;\n\n    const contentWrapperElOffsetHeight = this.contentWrapperEl.offsetHeight;\n\n    this.axis.x.isOverflowing = contentElScrollWidth > contentElOffsetWidth;\n    this.axis.y.isOverflowing =\n      contentElScrollHeight > contentWrapperElOffsetHeight;\n\n    // Set isOverflowing to false if user explicitely set hidden overflow\n    this.axis.x.isOverflowing =\n      elOverflowX === 'hidden' ? false : this.axis.x.isOverflowing;\n    this.axis.y.isOverflowing =\n      elOverflowY === 'hidden' ? false : this.axis.y.isOverflowing;\n\n    this.axis.x.forceVisible =\n      this.options.forceVisible === 'x' || this.options.forceVisible === true;\n    this.axis.y.forceVisible =\n      this.options.forceVisible === 'y' || this.options.forceVisible === true;\n\n    this.hideNativeScrollbar();\n\n    // Set isOverflowing to false if scrollbar is not necessary (content is shorter than offset)\n    let offsetForXScrollbar = this.axis.x.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n    let offsetForYScrollbar = this.axis.y.isOverflowing\n      ? this.scrollbarWidth\n      : 0;\n\n    this.axis.x.isOverflowing =\n      this.axis.x.isOverflowing &&\n      contentElScrollWidth > contentWrapperElOffsetWidth - offsetForYScrollbar;\n    this.axis.y.isOverflowing =\n      this.axis.y.isOverflowing &&\n      contentElScrollHeight >\n        contentWrapperElOffsetHeight - offsetForXScrollbar;\n\n    this.axis.x.scrollbar.size = this.getScrollbarSize('x');\n    this.axis.y.scrollbar.size = this.getScrollbarSize('y');\n\n    this.axis.x.scrollbar.el.style.width = `${this.axis.x.scrollbar.size}px`;\n    this.axis.y.scrollbar.el.style.height = `${this.axis.y.scrollbar.size}px`;\n\n    this.positionScrollbar('x');\n    this.positionScrollbar('y');\n\n    this.toggleTrackVisibility('x');\n    this.toggleTrackVisibility('y');\n  }\n\n  /**\n   * Calculate scrollbar size\n   */\n  getScrollbarSize(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return 0;\n    }\n\n    const contentSize = this.contentEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    let scrollbarSize;\n\n    let scrollbarRatio = trackSize / contentSize;\n\n    // Calculate new height/position of drag handle.\n    scrollbarSize = Math.max(\n      ~~(scrollbarRatio * trackSize),\n      this.options.scrollbarMinSize\n    );\n\n    if (this.options.scrollbarMaxSize) {\n      scrollbarSize = Math.min(scrollbarSize, this.options.scrollbarMaxSize);\n    }\n\n    return scrollbarSize;\n  }\n\n  positionScrollbar(axis = 'y') {\n    if (!this.axis[axis].isOverflowing) {\n      return;\n    }\n\n    const contentSize = this.contentWrapperEl[this.axis[axis].scrollSizeAttr];\n    const trackSize = this.axis[axis].track.el[this.axis[axis].offsetSizeAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    let scrollOffset = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    scrollOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollingInverted\n        ? -scrollOffset\n        : scrollOffset;\n    let scrollPourcent = scrollOffset / (contentSize - hostSize);\n\n    let handleOffset = ~~((trackSize - scrollbar.size) * scrollPourcent);\n    handleOffset =\n      axis === 'x' &&\n      this.isRtl &&\n      SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n        ? handleOffset + (trackSize - scrollbar.size)\n        : handleOffset;\n\n    scrollbar.el.style.transform =\n      axis === 'x'\n        ? `translate3d(${handleOffset}px, 0, 0)`\n        : `translate3d(0, ${handleOffset}px, 0)`;\n  }\n\n  toggleTrackVisibility(axis = 'y') {\n    const track = this.axis[axis].track.el;\n    const scrollbar = this.axis[axis].scrollbar.el;\n\n    if (this.axis[axis].isOverflowing || this.axis[axis].forceVisible) {\n      track.style.visibility = 'visible';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'scroll';\n    } else {\n      track.style.visibility = 'hidden';\n      this.contentWrapperEl.style[this.axis[axis].overflowAttr] = 'hidden';\n    }\n\n    // Even if forceVisible is enabled, scrollbar itself should be hidden\n    if (this.axis[axis].isOverflowing) {\n      scrollbar.style.display = 'block';\n    } else {\n      scrollbar.style.display = 'none';\n    }\n  }\n\n  hideNativeScrollbar() {\n    this.offsetEl.style[this.isRtl ? 'left' : 'right'] =\n      this.axis.y.isOverflowing || this.axis.y.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n    this.offsetEl.style.bottom =\n      this.axis.x.isOverflowing || this.axis.x.forceVisible\n        ? `-${this.scrollbarWidth}px`\n        : 0;\n  }\n\n  /**\n   * On scroll event handling\n   */\n  onScroll = () => {\n    const elWindow = getElementWindow(this.el);\n    if (!this.scrollXTicking) {\n      elWindow.requestAnimationFrame(this.scrollX);\n      this.scrollXTicking = true;\n    }\n\n    if (!this.scrollYTicking) {\n      elWindow.requestAnimationFrame(this.scrollY);\n      this.scrollYTicking = true;\n    }\n  };\n\n  scrollX = () => {\n    if (this.axis.x.isOverflowing) {\n      this.showScrollbar('x');\n      this.positionScrollbar('x');\n    }\n\n    this.scrollXTicking = false;\n  };\n\n  scrollY = () => {\n    if (this.axis.y.isOverflowing) {\n      this.showScrollbar('y');\n      this.positionScrollbar('y');\n    }\n\n    this.scrollYTicking = false;\n  };\n\n  onMouseEnter = () => {\n    this.showScrollbar('x');\n    this.showScrollbar('y');\n  };\n\n  onMouseMove = e => {\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseMoveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseMoveForAxis('y');\n    }\n  };\n\n  onMouseMoveForAxis(axis = 'y') {\n    this.axis[axis].track.rect = this.axis[\n      axis\n    ].track.el.getBoundingClientRect();\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n\n    const isWithinScrollbarBoundsX = this.isWithinBounds(\n      this.axis[axis].scrollbar.rect\n    );\n\n    if (isWithinScrollbarBoundsX) {\n      this.axis[axis].scrollbar.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n    }\n\n    if (this.isWithinBounds(this.axis[axis].track.rect)) {\n      this.showScrollbar(axis);\n      this.axis[axis].track.el.classList.add(this.classNames.hover);\n    } else {\n      this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    }\n  }\n\n  onMouseLeave = () => {\n    this.onMouseMove.cancel();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      this.onMouseLeaveForAxis('x');\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      this.onMouseLeaveForAxis('y');\n    }\n\n    this.mouseX = -1;\n    this.mouseY = -1;\n  };\n\n  onMouseLeaveForAxis(axis = 'y') {\n    this.axis[axis].track.el.classList.remove(this.classNames.hover);\n    this.axis[axis].scrollbar.el.classList.remove(this.classNames.hover);\n  }\n\n  onWindowResize = () => {\n    // Recalculate scrollbarWidth in case it's a zoom\n    this.scrollbarWidth = this.getScrollbarWidth();\n\n    this.hideNativeScrollbar();\n  };\n\n  /**\n   * Show scrollbar\n   */\n  showScrollbar(axis = 'y') {\n    let scrollbar = this.axis[axis].scrollbar.el;\n\n    if (!this.axis[axis].isVisible) {\n      scrollbar.classList.add(this.classNames.visible);\n      this.axis[axis].isVisible = true;\n    }\n\n    if (this.options.autoHide) {\n      this.hideScrollbars();\n    }\n  }\n\n  /**\n   * Hide Scrollbar\n   */\n  hideScrollbars = () => {\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (!this.isWithinBounds(this.axis.y.track.rect)) {\n      this.axis.y.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.y.isVisible = false;\n    }\n\n    if (!this.isWithinBounds(this.axis.x.track.rect)) {\n      this.axis.x.scrollbar.el.classList.remove(this.classNames.visible);\n      this.axis.x.isVisible = false;\n    }\n  };\n\n  onPointerEvent = e => {\n    let isWithinTrackXBounds, isWithinTrackYBounds;\n\n    this.axis.x.track.rect = this.axis.x.track.el.getBoundingClientRect();\n    this.axis.y.track.rect = this.axis.y.track.el.getBoundingClientRect();\n\n    if (this.axis.x.isOverflowing || this.axis.x.forceVisible) {\n      isWithinTrackXBounds = this.isWithinBounds(this.axis.x.track.rect);\n    }\n\n    if (this.axis.y.isOverflowing || this.axis.y.forceVisible) {\n      isWithinTrackYBounds = this.isWithinBounds(this.axis.y.track.rect);\n    }\n\n    // If any pointer event is called on the scrollbar\n    if (isWithinTrackXBounds || isWithinTrackYBounds) {\n      // Preventing the event's default action stops text being\n      // selectable during the drag.\n      e.preventDefault();\n      // Prevent event leaking\n      e.stopPropagation();\n\n      if (e.type === 'mousedown') {\n        if (isWithinTrackXBounds) {\n          this.axis.x.scrollbar.rect = this.axis.x.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.x.scrollbar.rect)) {\n            this.onDragStart(e, 'x');\n          } else {\n            this.onTrackClick(e, 'x');\n          }\n        }\n\n        if (isWithinTrackYBounds) {\n          this.axis.y.scrollbar.rect = this.axis.y.scrollbar.el.getBoundingClientRect();\n\n          if (this.isWithinBounds(this.axis.y.scrollbar.rect)) {\n            this.onDragStart(e, 'y');\n          } else {\n            this.onTrackClick(e, 'y');\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * on scrollbar handle drag movement starts\n   */\n  onDragStart(e, axis = 'y') {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    const scrollbar = this.axis[axis].scrollbar;\n\n    // Measure how far the user's mouse is from the top of the scrollbar drag handle.\n    const eventOffset = axis === 'y' ? e.pageY : e.pageX;\n    this.axis[axis].dragOffset =\n      eventOffset - scrollbar.rect[this.axis[axis].offsetAttr];\n    this.draggedAxis = axis;\n\n    this.el.classList.add(this.classNames.dragging);\n\n    elDocument.addEventListener('mousemove', this.drag, true);\n    elDocument.addEventListener('mouseup', this.onEndDrag, true);\n    if (this.removePreventClickId === null) {\n      elDocument.addEventListener('click', this.preventClick, true);\n      elDocument.addEventListener('dblclick', this.preventClick, true);\n    } else {\n      elWindow.clearTimeout(this.removePreventClickId);\n      this.removePreventClickId = null;\n    }\n  }\n\n  /**\n   * Drag scrollbar handle\n   */\n  drag = e => {\n    let eventOffset;\n    const track = this.axis[this.draggedAxis].track;\n    const trackSize = track.rect[this.axis[this.draggedAxis].sizeAttr];\n    const scrollbar = this.axis[this.draggedAxis].scrollbar;\n    const contentSize = this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollSizeAttr\n    ];\n    const hostSize = parseInt(\n      this.elStyles[this.axis[this.draggedAxis].sizeAttr],\n      10\n    );\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (this.draggedAxis === 'y') {\n      eventOffset = e.pageY;\n    } else {\n      eventOffset = e.pageX;\n    }\n\n    // Calculate how far the user's mouse is from the top/left of the scrollbar (minus the dragOffset).\n    let dragPos =\n      eventOffset -\n      track.rect[this.axis[this.draggedAxis].offsetAttr] -\n      this.axis[this.draggedAxis].dragOffset;\n    // Convert the mouse position into a percentage of the scrollbar height/width.\n    let dragPerc = dragPos / (trackSize - scrollbar.size);\n\n    // Scroll the content by the same percentage.\n    let scrollPos = dragPerc * (contentSize - hostSize);\n\n    // Fix browsers inconsistency on RTL\n    if (this.draggedAxis === 'x') {\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollbarInverted\n          ? scrollPos - (trackSize + scrollbar.size)\n          : scrollPos;\n      scrollPos =\n        this.isRtl && SimpleBar.getRtlHelpers().isRtlScrollingInverted\n          ? -scrollPos\n          : scrollPos;\n    }\n\n    this.contentWrapperEl[\n      this.axis[this.draggedAxis].scrollOffsetAttr\n    ] = scrollPos;\n  };\n\n  /**\n   * End scroll handle drag\n   */\n  onEndDrag = e => {\n    const elDocument = getElementDocument(this.el);\n    const elWindow = getElementWindow(this.el);\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.el.classList.remove(this.classNames.dragging);\n\n    elDocument.removeEventListener('mousemove', this.drag, true);\n    elDocument.removeEventListener('mouseup', this.onEndDrag, true);\n    this.removePreventClickId = elWindow.setTimeout(() => {\n      // Remove these asynchronously so we still suppress click events\n      // generated simultaneously with mouseup.\n      elDocument.removeEventListener('click', this.preventClick, true);\n      elDocument.removeEventListener('dblclick', this.preventClick, true);\n      this.removePreventClickId = null;\n    });\n  };\n\n  /**\n   * Handler to ignore click events during drag\n   */\n  preventClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  onTrackClick(e, axis = 'y') {\n    if (!this.options.clickOnTrack) return;\n\n    const elWindow = getElementWindow(this.el);\n    this.axis[axis].scrollbar.rect = this.axis[\n      axis\n    ].scrollbar.el.getBoundingClientRect();\n    const scrollbar = this.axis[axis].scrollbar;\n    const scrollbarOffset = scrollbar.rect[this.axis[axis].offsetAttr];\n    const hostSize = parseInt(this.elStyles[this.axis[axis].sizeAttr], 10);\n    let scrolled = this.contentWrapperEl[this.axis[axis].scrollOffsetAttr];\n    const t =\n      axis === 'y'\n        ? this.mouseY - scrollbarOffset\n        : this.mouseX - scrollbarOffset;\n    const dir = t < 0 ? -1 : 1;\n    const scrollSize = dir === -1 ? scrolled - hostSize : scrolled + hostSize;\n\n    const scrollTo = () => {\n      if (dir === -1) {\n        if (scrolled > scrollSize) {\n          scrolled -= this.options.clickOnTrackSpeed;\n          this.contentWrapperEl.scrollTo({\n            [this.axis[axis].offsetAttr]: scrolled\n          });\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      } else {\n        if (scrolled < scrollSize) {\n          scrolled += this.options.clickOnTrackSpeed;\n          this.contentWrapperEl.scrollTo({\n            [this.axis[axis].offsetAttr]: scrolled\n          });\n          elWindow.requestAnimationFrame(scrollTo);\n        }\n      }\n    };\n\n    scrollTo();\n  }\n\n  /**\n   * Getter for content element\n   */\n  getContentElement() {\n    return this.contentEl;\n  }\n\n  /**\n   * Getter for original scrolling element\n   */\n  getScrollElement() {\n    return this.contentWrapperEl;\n  }\n\n  getScrollbarWidth() {\n    // Try/catch for FF 56 throwing on undefined computedStyles\n    try {\n      // Detect browsers supporting CSS scrollbar styling and do not calculate\n      if (\n        getComputedStyle(this.contentWrapperEl, '::-webkit-scrollbar')\n          .display === 'none' ||\n        'scrollbarWidth' in document.documentElement.style ||\n        '-ms-overflow-style' in document.documentElement.style\n      ) {\n        return 0;\n      } else {\n        return scrollbarWidth();\n      }\n    } catch (e) {\n      return scrollbarWidth();\n    }\n  }\n\n  removeListeners() {\n    const elWindow = getElementWindow(this.el);\n    // Event listeners\n    if (this.options.autoHide) {\n      this.el.removeEventListener('mouseenter', this.onMouseEnter);\n    }\n\n    ['mousedown', 'click', 'dblclick'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, true);\n    });\n\n    ['touchstart', 'touchend', 'touchmove'].forEach(e => {\n      this.el.removeEventListener(e, this.onPointerEvent, {\n        capture: true,\n        passive: true\n      });\n    });\n\n    this.el.removeEventListener('mousemove', this.onMouseMove);\n    this.el.removeEventListener('mouseleave', this.onMouseLeave);\n\n    if (this.contentWrapperEl) {\n      this.contentWrapperEl.removeEventListener('scroll', this.onScroll);\n    }\n\n    elWindow.removeEventListener('resize', this.onWindowResize);\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n    }\n\n    // Cancel all debounced functions\n    this.recalculate.cancel();\n    this.onMouseMove.cancel();\n    this.hideScrollbars.cancel();\n    this.onWindowResize.cancel();\n  }\n\n  /**\n   * UnMount mutation observer and delete SimpleBar instance from DOM element\n   */\n  unMount() {\n    this.removeListeners();\n    SimpleBar.instances.delete(this.el);\n  }\n\n  /**\n   * Check if mouse is within bounds\n   */\n  isWithinBounds(bbox) {\n    return (\n      this.mouseX >= bbox.left &&\n      this.mouseX <= bbox.left + bbox.width &&\n      this.mouseY >= bbox.top &&\n      this.mouseY <= bbox.top + bbox.height\n    );\n  }\n\n  /**\n   * Find element children matches query\n   */\n  findChild(el, query) {\n    const matches =\n      el.matches ||\n      el.webkitMatchesSelector ||\n      el.mozMatchesSelector ||\n      el.msMatchesSelector;\n    return Array.prototype.filter.call(el.children, child =>\n      matches.call(child, query)\n    )[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}