{"ast":null,"code":"/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n * @author Lea Verou http://lea.verou.me\r\n */\n\n/**\r\n * prism-react-renderer:\r\n * This file has been modified to remove:\r\n * - globals and window dependency\r\n * - worker support\r\n * - highlightAll and other element dependent methods\r\n * - _.hooks helpers\r\n * - UMD/node-specific hacks\r\n * It has also been run through prettier\r\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Insert a token before another token in a language literal\r\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n       * we cannot just provide an object, we need anobject and a key.\r\n       * @param inside The key (or language id) of the parent\r\n       * @param before The key to insert before. If not provided, the function appends instead.\r\n       * @param insert Object with the key/value pairs to insert\r\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      env.tokens = _.tokenize(env.code, env.grammar);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var insideString = {\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true\n    }, // “Normal” string\n    {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'number': {\n    pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i,\n    greedy: true\n  },\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n  'boolean': /\\b(?:true|false)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': {\n      pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': [{\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    }, {\n      pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n      lookbehind: true\n    }],\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ;else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-javadoclike\" */\n\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n/* \"prismjs/components/prism-java\" */\n\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-markup-templating\" */\n\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-jsdoc\" */\n\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-flow\" */\n\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n/* \"prismjs/components/prism-n4js\" */\n\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:md|markdown)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {}\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(Prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern, starAlternative) {\n    pattern = pattern.replace(/<inner>/g, inner);\n\n    if (starAlternative) {\n      pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*');\n    }\n\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(/__/g, tableCell);\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#+.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source, false),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'variable': {\n          pattern: /(\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'content': {\n          pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'string': {\n          pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d+.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      // pattern: /^(?:[_].*(?:\\r\\n?|\\n|(?![\\s\\S])))+/m\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\nvar typescript = Prism.util.clone(Prism.languages.typescript);\nPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n/* \"prismjs/components/prism-wasm\" */\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\nexport default Prism;","map":{"version":3,"sources":["/Users/MihirBafna/Downloads/volt-react-dashboard-v1.0.0/node_modules/prism-react-renderer/prism/index.js"],"names":["Prism","uniqueId","_","util","encode","tokens","Token","type","content","alias","map","replace","o","Object","prototype","toString","call","match","objId","obj","defineProperty","value","clone","visited","key","hasOwnProperty","forEach","v","i","languages","extend","id","redef","lang","insertBefore","inside","before","insert","root","grammar","arguments","length","newToken","ret","token","DFS","callback","plugins","highlight","text","language","env","code","tokenize","stringify","matchGrammar","strarr","index","startPos","oneshot","target","patterns","j","pattern","lookbehind","greedy","lookbehindLength","global","flags","RegExp","source","pos","str","lastIndex","exec","from","to","k","p","len","delNum","slice","after","args","push","wrapped","Array","splice","apply","hooks","add","rest","matchedStr","parent","element","join","tag","classes","attributes","aliases","keys","name","markup","addInlined","tagName","includedCdataInside","def","xml","html","mathml","svg","envVars","insideString","bash","variable","toBeCopied","shell","clike","punctuation","c","cpp","string","css","selector","javascript","js","jsx","stringifyToken","walkTokens","openedTags","notTagNorBrace","pop","openedBraces","plainText","javaDocLike","javadoclike","docCommentSupport","tokenName","definition","isArray","l","addSupport","docLanguage","keywords","className","java","function","getPlaceholder","toUpperCase","defineProperties","buildPlaceholders","placeholderPattern","replaceFilter","tokenStack","placeholder","indexOf","tokenizePlaceholders","t","s","substring","middle","replacement","concat","php","string_interpolation","test","phpPattern","parameterPrefix","jsdoc","actionscript","comment","interpolation","coffeescript","coffee","unshift","maybeClassNameTokens","flow","keyword","n4js","n4jsd","typescript","ts","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","undefined","filter","Boolean","counter","tokenizeWithHooks","run","tokenizeInterpolationExpression","expression","tempGrammar","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","interpolationExpression","embeddedTokens","placeholders","afterTokens","supportedLanguages","findTemplateStrings","embedded","stringContent","graphql","inner","createInline","starAlternative","tableCell","tableRow","tableLine","markdown","codeLang","codeBlock","trim","split","toLowerCase","cls","autoloader","Date","valueOf","Math","floor","random","loadLanguages","ele","document","getElementById","innerHTML","textContent","md","diff","PREFIXES","prefix","git","go","handlebars","handlebarsPattern","json","less","makefile","objectivec","ocaml","python","py","reason","sass","atrule","operator","important","property","scss","sql","stylus","func","tsx","wasm","yaml","yml"],"mappings":"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","sourcesContent":["/**\r\n * Prism: Lightweight, robust, elegant syntax highlighting\r\n * MIT license http://www.opensource.org/licenses/mit-license.php/\r\n * @author Lea Verou http://lea.verou.me\r\n */\n\n/**\r\n * prism-react-renderer:\r\n * This file has been modified to remove:\r\n * - globals and window dependency\r\n * - worker support\r\n * - highlightAll and other element dependent methods\r\n * - _.hooks helpers\r\n * - UMD/node-specific hacks\r\n * It has also been run through prettier\r\n */\nvar Prism = function () {\n  var uniqueId = 0;\n  var _ = {\n    util: {\n      encode: function (tokens) {\n        if (tokens instanceof Token) {\n          return new Token(tokens.type, _.util.encode(tokens.content), tokens.alias);\n        } else if (_.util.type(tokens) === \"Array\") {\n          return tokens.map(_.util.encode);\n        } else {\n          return tokens.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        }\n      },\n      type: function (o) {\n        return Object.prototype.toString.call(o).match(/\\[object (\\w+)\\]/)[1];\n      },\n      objId: function (obj) {\n        if (!obj[\"__id\"]) {\n          Object.defineProperty(obj, \"__id\", {\n            value: ++uniqueId\n          });\n        }\n\n        return obj[\"__id\"];\n      },\n      // Deep clone a language definition (e.g. to extend it)\n      clone: function (o, visited) {\n        var type = _.util.type(o);\n\n        visited = visited || {};\n\n        switch (type) {\n          case \"Object\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = {};\n            visited[_.util.objId(o)] = clone;\n\n            for (var key in o) {\n              if (o.hasOwnProperty(key)) {\n                clone[key] = _.util.clone(o[key], visited);\n              }\n            }\n\n            return clone;\n\n          case \"Array\":\n            if (visited[_.util.objId(o)]) {\n              return visited[_.util.objId(o)];\n            }\n\n            var clone = [];\n            visited[_.util.objId(o)] = clone;\n            o.forEach(function (v, i) {\n              clone[i] = _.util.clone(v, visited);\n            });\n            return clone;\n        }\n\n        return o;\n      }\n    },\n    languages: {\n      extend: function (id, redef) {\n        var lang = _.util.clone(_.languages[id]);\n\n        for (var key in redef) {\n          lang[key] = redef[key];\n        }\n\n        return lang;\n      },\n\n      /**\r\n       * Insert a token before another token in a language literal\r\n       * As this needs to recreate the object (we cannot actually insert before keys in object literals),\r\n       * we cannot just provide an object, we need anobject and a key.\r\n       * @param inside The key (or language id) of the parent\r\n       * @param before The key to insert before. If not provided, the function appends instead.\r\n       * @param insert Object with the key/value pairs to insert\r\n       * @param root The object that contains `inside`. If equal to Prism.languages, it can be omitted.\r\n       */\n      insertBefore: function (inside, before, insert, root) {\n        root = root || _.languages;\n        var grammar = root[inside];\n\n        if (arguments.length == 2) {\n          insert = arguments[1];\n\n          for (var newToken in insert) {\n            if (insert.hasOwnProperty(newToken)) {\n              grammar[newToken] = insert[newToken];\n            }\n          }\n\n          return grammar;\n        }\n\n        var ret = {};\n\n        for (var token in grammar) {\n          if (grammar.hasOwnProperty(token)) {\n            if (token == before) {\n              for (var newToken in insert) {\n                if (insert.hasOwnProperty(newToken)) {\n                  ret[newToken] = insert[newToken];\n                }\n              }\n            }\n\n            ret[token] = grammar[token];\n          }\n        } // Update references in other language definitions\n\n\n        _.languages.DFS(_.languages, function (key, value) {\n          if (value === root[inside] && key != inside) {\n            this[key] = ret;\n          }\n        });\n\n        return root[inside] = ret;\n      },\n      // Traverse a language definition with Depth First Search\n      DFS: function (o, callback, type, visited) {\n        visited = visited || {};\n\n        for (var i in o) {\n          if (o.hasOwnProperty(i)) {\n            callback.call(o, i, o[i], type || i);\n\n            if (_.util.type(o[i]) === \"Object\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, null, visited);\n            } else if (_.util.type(o[i]) === \"Array\" && !visited[_.util.objId(o[i])]) {\n              visited[_.util.objId(o[i])] = true;\n\n              _.languages.DFS(o[i], callback, i, visited);\n            }\n          }\n        }\n      }\n    },\n    plugins: {},\n    highlight: function (text, grammar, language) {\n      var env = {\n        code: text,\n        grammar: grammar,\n        language: language\n      };\n      env.tokens = _.tokenize(env.code, env.grammar);\n      return Token.stringify(_.util.encode(env.tokens), env.language);\n    },\n    matchGrammar: function (text, strarr, grammar, index, startPos, oneshot, target) {\n      var Token = _.Token;\n\n      for (var token in grammar) {\n        if (!grammar.hasOwnProperty(token) || !grammar[token]) {\n          continue;\n        }\n\n        if (token == target) {\n          return;\n        }\n\n        var patterns = grammar[token];\n        patterns = _.util.type(patterns) === \"Array\" ? patterns : [patterns];\n\n        for (var j = 0; j < patterns.length; ++j) {\n          var pattern = patterns[j],\n              inside = pattern.inside,\n              lookbehind = !!pattern.lookbehind,\n              greedy = !!pattern.greedy,\n              lookbehindLength = 0,\n              alias = pattern.alias;\n\n          if (greedy && !pattern.pattern.global) {\n            // Without the global flag, lastIndex won't work\n            var flags = pattern.pattern.toString().match(/[imuy]*$/)[0];\n            pattern.pattern = RegExp(pattern.pattern.source, flags + \"g\");\n          }\n\n          pattern = pattern.pattern || pattern; // Don’t cache length as it changes during the loop\n\n          for (var i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {\n            var str = strarr[i];\n\n            if (strarr.length > text.length) {\n              // Something went terribly wrong, ABORT, ABORT!\n              return;\n            }\n\n            if (str instanceof Token) {\n              continue;\n            }\n\n            if (greedy && i != strarr.length - 1) {\n              pattern.lastIndex = pos;\n              var match = pattern.exec(text);\n\n              if (!match) {\n                break;\n              }\n\n              var from = match.index + (lookbehind ? match[1].length : 0),\n                  to = match.index + match[0].length,\n                  k = i,\n                  p = pos;\n\n              for (var len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {\n                p += strarr[k].length; // Move the index i to the element in strarr that is closest to from\n\n                if (from >= p) {\n                  ++i;\n                  pos = p;\n                }\n              } // If strarr[i] is a Token, then the match starts inside another Token, which is invalid\n\n\n              if (strarr[i] instanceof Token) {\n                continue;\n              } // Number of tokens to delete and replace with the new match\n\n\n              delNum = k - i;\n              str = text.slice(pos, p);\n              match.index -= pos;\n            } else {\n              pattern.lastIndex = 0;\n              var match = pattern.exec(str),\n                  delNum = 1;\n            }\n\n            if (!match) {\n              if (oneshot) {\n                break;\n              }\n\n              continue;\n            }\n\n            if (lookbehind) {\n              lookbehindLength = match[1] ? match[1].length : 0;\n            }\n\n            var from = match.index + lookbehindLength,\n                match = match[0].slice(lookbehindLength),\n                to = from + match.length,\n                before = str.slice(0, from),\n                after = str.slice(to);\n            var args = [i, delNum];\n\n            if (before) {\n              ++i;\n              pos += before.length;\n              args.push(before);\n            }\n\n            var wrapped = new Token(token, inside ? _.tokenize(match, inside) : match, alias, match, greedy);\n            args.push(wrapped);\n\n            if (after) {\n              args.push(after);\n            }\n\n            Array.prototype.splice.apply(strarr, args);\n\n            if (delNum != 1) {\n              _.matchGrammar(text, strarr, grammar, i, pos, true, token);\n            }\n\n            if (oneshot) {\n              break;\n            }\n          }\n        }\n      }\n    },\n    hooks: {\n      add: function () {}\n    },\n    tokenize: function (text, grammar, language) {\n      var strarr = [text];\n      var rest = grammar.rest;\n\n      if (rest) {\n        for (var token in rest) {\n          grammar[token] = rest[token];\n        }\n\n        delete grammar.rest;\n      }\n\n      _.matchGrammar(text, strarr, grammar, 0, 0, false);\n\n      return strarr;\n    }\n  };\n\n  var Token = _.Token = function (type, content, alias, matchedStr, greedy) {\n    this.type = type;\n    this.content = content;\n    this.alias = alias; // Copy of the full string this token was created from\n\n    this.length = (matchedStr || \"\").length | 0;\n    this.greedy = !!greedy;\n  };\n\n  Token.stringify = function (o, language, parent) {\n    if (typeof o == \"string\") {\n      return o;\n    }\n\n    if (_.util.type(o) === \"Array\") {\n      return o.map(function (element) {\n        return Token.stringify(element, language, o);\n      }).join(\"\");\n    }\n\n    var env = {\n      type: o.type,\n      content: Token.stringify(o.content, language, parent),\n      tag: \"span\",\n      classes: [\"token\", o.type],\n      attributes: {},\n      language: language,\n      parent: parent\n    };\n\n    if (o.alias) {\n      var aliases = _.util.type(o.alias) === \"Array\" ? o.alias : [o.alias];\n      Array.prototype.push.apply(env.classes, aliases);\n    }\n\n    var attributes = Object.keys(env.attributes).map(function (name) {\n      return name + '=\"' + (env.attributes[name] || \"\").replace(/\"/g, \"&quot;\") + '\"';\n    }).join(\" \");\n    return \"<\" + env.tag + ' class=\"' + env.classes.join(\" \") + '\"' + (attributes ? \" \" + attributes : \"\") + \">\" + env.content + \"</\" + env.tag + \">\";\n  };\n\n  return _;\n}();\n\n/* This content is auto-generated to include some prismjs language components: */\n\n/* \"prismjs/components/prism-markup\" */\n\nPrism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': /<!DOCTYPE[\\s\\S]+?>/i,\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n/* \"prismjs/components/prism-bash\" */\n\n(function (Prism) {\n  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\\n' '|'\n  // + LC_ALL, RANDOM, REPLY, SECONDS.\n  // + make sure PS1..4 are here as they are not always set,\n  // - some useless things.\n  var envVars = '\\\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\\\b';\n  var insideString = {\n    'environment': {\n      pattern: RegExp(\"\\\\$\" + envVars),\n      alias: 'constant'\n    },\n    'variable': [// [0]: Arithmetic Environment\n    {\n      pattern: /\\$?\\(\\([\\s\\S]+?\\)\\)/,\n      greedy: true,\n      inside: {\n        // If there is a $ sign at the beginning highlight $(( and )) as variable\n        'variable': [{\n          pattern: /(^\\$\\(\\([\\s\\S]+)\\)\\)/,\n          lookbehind: true\n        }, /^\\$\\(\\(/],\n        'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee]-?\\d+)?/,\n        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic\n        'operator': /--?|-=|\\+\\+?|\\+=|!=?|~|\\*\\*?|\\*=|\\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\\^=?|\\|\\|?|\\|=|\\?|:/,\n        // If there is no $ sign at the beginning highlight (( and )) as punctuation\n        'punctuation': /\\(\\(?|\\)\\)?|,|;/\n      }\n    }, // [1]: Command Substitution\n    {\n      pattern: /\\$\\((?:\\([^)]+\\)|[^()])+\\)|`[^`]+`/,\n      greedy: true,\n      inside: {\n        'variable': /^\\$\\(|^`|\\)$|`$/\n      }\n    }, // [2]: Brace expansion\n    {\n      pattern: /\\$\\{[^}]+\\}/,\n      greedy: true,\n      inside: {\n        'operator': /:[-=?+]?|[!\\/]|##?|%%?|\\^\\^?|,,?/,\n        'punctuation': /[\\[\\]]/,\n        'environment': {\n          pattern: RegExp(\"(\\\\{)\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      }\n    }, /\\$(?:\\w+|[#?*!@$])/],\n    // Escape sequences from echo and printf's manuals, and escaped quotes.\n    'entity': /\\\\(?:[abceEfnrtv\\\\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/\n  };\n  Prism.languages.bash = {\n    'shebang': {\n      pattern: /^#!\\s*\\/.*/,\n      alias: 'important'\n    },\n    'comment': {\n      pattern: /(^|[^\"{\\\\$])#.*/,\n      lookbehind: true\n    },\n    'function-name': [// a) function foo {\n    // b) foo() {\n    // c) function foo() {\n    // but not “foo {”\n    {\n      // a) and c)\n      pattern: /(\\bfunction\\s+)\\w+(?=(?:\\s*\\(?:\\s*\\))?\\s*\\{)/,\n      lookbehind: true,\n      alias: 'function'\n    }, {\n      // b)\n      pattern: /\\b\\w+(?=\\s*\\(\\s*\\)\\s*\\{)/,\n      alias: 'function'\n    }],\n    // Highlight variable names as variables in for and select beginnings.\n    'for-or-select': {\n      pattern: /(\\b(?:for|select)\\s+)\\w+(?=\\s+in\\s)/,\n      alias: 'variable',\n      lookbehind: true\n    },\n    // Highlight variable names as variables in the left-hand part\n    // of assignments (“=” and “+=”).\n    'assign-left': {\n      pattern: /(^|[\\s;|&]|[<>]\\()\\w+(?=\\+?=)/,\n      inside: {\n        'environment': {\n          pattern: RegExp(\"(^|[\\\\s;|&]|[<>]\\\\()\" + envVars),\n          lookbehind: true,\n          alias: 'constant'\n        }\n      },\n      alias: 'variable',\n      lookbehind: true\n    },\n    'string': [// Support for Here-documents https://en.wikipedia.org/wiki/Here_document\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)(\\w+?)\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\2/,\n      lookbehind: true,\n      greedy: true,\n      inside: insideString\n    }, // Here-document with quotes around the tag\n    // → No expansion (so no “inside”).\n    {\n      pattern: /((?:^|[^<])<<-?\\s*)([\"'])(\\w+)\\2\\s*(?:\\r?\\n|\\r)(?:[\\s\\S])*?(?:\\r?\\n|\\r)\\3/,\n      lookbehind: true,\n      greedy: true\n    }, // “Normal” string\n    {\n      pattern: /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/,\n      greedy: true,\n      inside: insideString\n    }],\n    'environment': {\n      pattern: RegExp(\"\\\\$?\" + envVars),\n      alias: 'constant'\n    },\n    'variable': insideString.variable,\n    'function': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'keyword': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n    'builtin': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:\\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\\s;|&])/,\n      lookbehind: true,\n      // Alias added to make those easier to distinguish from strings.\n      alias: 'class-name'\n    },\n    'boolean': {\n      pattern: /(^|[\\s;|&]|[<>]\\()(?:true|false)(?=$|[)\\s;|&])/,\n      lookbehind: true\n    },\n    'file-descriptor': {\n      pattern: /\\B&\\d\\b/,\n      alias: 'important'\n    },\n    'operator': {\n      // Lots of redirections here, but not just that.\n      pattern: /\\d?<>|>\\||\\+=|==?|!=?|=~|<<[<-]?|[&\\d]?>>|\\d?[<>]&?|&[>&]?|\\|[&|]?|<=?|>=?/,\n      inside: {\n        'file-descriptor': {\n          pattern: /^\\d/,\n          alias: 'important'\n        }\n      }\n    },\n    'punctuation': /\\$?\\(\\(?|\\)\\)?|\\.\\.|[{}[\\];\\\\]/,\n    'number': {\n      pattern: /(^|\\s)(?:[1-9]\\d*|0)(?:[.,]\\d+)?\\b/,\n      lookbehind: true\n    }\n  };\n  /* Patterns in command substitution. */\n\n  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];\n  var inside = insideString.variable[1].inside;\n\n  for (var i = 0; i < toBeCopied.length; i++) {\n    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];\n  }\n\n  Prism.languages.shell = Prism.languages.bash;\n})(Prism);\n/* \"prismjs/components/prism-clike\" */\n\n\nPrism.languages.clike = {\n  'comment': [{\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^\\\\:])\\/\\/.*/,\n    lookbehind: true,\n    greedy: true\n  }],\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n    lookbehind: true,\n    inside: {\n      punctuation: /[.\\\\]/\n    }\n  },\n  'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'function': /\\w+(?=\\()/,\n  'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n  'operator': /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n  'punctuation': /[{}[\\];(),.:]/\n};\n/* \"prismjs/components/prism-c\" */\n\nPrism.languages.c = Prism.languages.extend('clike', {\n  'class-name': {\n    pattern: /(\\b(?:enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/,\n  'number': /(?:\\b0x(?:[\\da-f]+\\.?[\\da-f]*|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]*/i\n});\nPrism.languages.insertBefore('c', 'string', {\n  'macro': {\n    // allow for multiline macro definitions\n    // spaces after the # character compile fine with gcc\n    pattern: /(^\\s*)#\\s*[a-z]+(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n    lookbehind: true,\n    alias: 'property',\n    inside: {\n      // highlight the path of the include statement as a string\n      'string': {\n        pattern: /(#\\s*include\\s*)(?:<.+?>|(\"|')(?:\\\\?.)+?\\2)/,\n        lookbehind: true\n      },\n      // highlight macro directives as keywords\n      'directive': {\n        pattern: /(#\\s*)\\b(?:define|defined|elif|else|endif|error|ifdef|ifndef|if|import|include|line|pragma|undef|using)\\b/,\n        lookbehind: true,\n        alias: 'keyword'\n      }\n    }\n  },\n  // highlight predefined macros as constants\n  'constant': /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n});\ndelete Prism.languages.c['boolean'];\n/* \"prismjs/components/prism-cpp\" */\n\nPrism.languages.cpp = Prism.languages.extend('c', {\n  'class-name': {\n    pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n    lookbehind: true\n  },\n  'keyword': /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n  'number': {\n    pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i,\n    greedy: true\n  },\n  'operator': />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n  'boolean': /\\b(?:true|false)\\b/\n});\nPrism.languages.insertBefore('cpp', 'string', {\n  'raw-string': {\n    pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n    alias: 'string',\n    greedy: true\n  }\n});\n/* \"prismjs/components/prism-css\" */\n\n(function (Prism) {\n  var string = /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n  Prism.languages.css = {\n    'comment': /\\/\\*[\\s\\S]*?\\*\\//,\n    'atrule': {\n      pattern: /@[\\w-]+[\\s\\S]*?(?:;|(?=\\s*\\{))/,\n      inside: {\n        'rule': /@[\\w-]+/ // See rest below\n\n      }\n    },\n    'url': {\n      pattern: RegExp('url\\\\((?:' + string.source + '|[^\\n\\r()]*)\\\\)', 'i'),\n      inside: {\n        'function': /^url/i,\n        'punctuation': /^\\(|\\)$/\n      }\n    },\n    'selector': RegExp('[^{}\\\\s](?:[^{};\"\\']|' + string.source + ')*?(?=\\\\s*\\\\{)'),\n    'string': {\n      pattern: string,\n      greedy: true\n    },\n    'property': /[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,\n    'important': /!important\\b/i,\n    'function': /[-a-z0-9]+(?=\\()/i,\n    'punctuation': /[(){};:,]/\n  };\n  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;\n  var markup = Prism.languages.markup;\n\n  if (markup) {\n    markup.tag.addInlined('style', 'css');\n    Prism.languages.insertBefore('inside', 'attr-value', {\n      'style-attr': {\n        pattern: /\\s*style=(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,\n        inside: {\n          'attr-name': {\n            pattern: /^\\s*style/i,\n            inside: markup.tag.inside\n          },\n          'punctuation': /^\\s*=\\s*['\"]|['\"]\\s*$/,\n          'attr-value': {\n            pattern: /.+/i,\n            inside: Prism.languages.css\n          }\n        },\n        alias: 'language-css'\n      }\n    }, markup.tag);\n  }\n})(Prism);\n/* \"prismjs/components/prism-css-extras\" */\n\n\nPrism.languages.css.selector = {\n  pattern: Prism.languages.css.selector,\n  inside: {\n    'pseudo-element': /:(?:after|before|first-letter|first-line|selection)|::[-\\w]+/,\n    'pseudo-class': /:[-\\w]+/,\n    'class': /\\.[-:.\\w]+/,\n    'id': /#[-:.\\w]+/,\n    'attribute': {\n      pattern: /\\[(?:[^[\\]\"']|(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1)*\\]/,\n      greedy: true,\n      inside: {\n        'punctuation': /^\\[|\\]$/,\n        'case-sensitivity': {\n          pattern: /(\\s)[si]$/i,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'namespace': {\n          pattern: /^(\\s*)[-*\\w\\xA0-\\uFFFF]*\\|(?!=)/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\|$/\n          }\n        },\n        'attribute': {\n          pattern: /^(\\s*)[-\\w\\xA0-\\uFFFF]+/,\n          lookbehind: true\n        },\n        'value': [/(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/, {\n          pattern: /(=\\s*)[-\\w\\xA0-\\uFFFF]+(?=\\s*$)/,\n          lookbehind: true\n        }],\n        'operator': /[|~*^$]?=/\n      }\n    },\n    'n-th': [{\n      pattern: /(\\(\\s*)[+-]?\\d*[\\dn](?:\\s*[+-]\\s*\\d+)?(?=\\s*\\))/,\n      lookbehind: true,\n      inside: {\n        'number': /[\\dn]+/,\n        'operator': /[+-]/\n      }\n    }, {\n      pattern: /(\\(\\s*)(?:even|odd)(?=\\s*\\))/i,\n      lookbehind: true\n    }],\n    'punctuation': /[()]/\n  }\n};\nPrism.languages.insertBefore('css', 'property', {\n  'variable': {\n    pattern: /(^|[^-\\w\\xA0-\\uFFFF])--[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*/i,\n    lookbehind: true\n  }\n});\nPrism.languages.insertBefore('css', 'function', {\n  'operator': {\n    pattern: /(\\s)[+\\-*\\/](?=\\s)/,\n    lookbehind: true\n  },\n  'hexcode': /#[\\da-f]{3,8}/i,\n  'entity': /\\\\[\\da-f]{1,8}/i,\n  'unit': {\n    pattern: /(\\d)(?:%|[a-z]+)/,\n    lookbehind: true\n  },\n  'number': /-?[\\d.]+/\n});\n/* \"prismjs/components/prism-javascript\" */\n\nPrism.languages.javascript = Prism.languages.extend('clike', {\n  'class-name': [Prism.languages.clike['class-name'], {\n    pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n    lookbehind: true\n  }],\n  'keyword': [{\n    pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n    lookbehind: true\n  }],\n  'number': /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n  'function': /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n  'operator': /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nPrism.languages.insertBefore('javascript', 'keyword', {\n  'regex': {\n    pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n    lookbehind: true,\n    greedy: true\n  },\n  // This must be declared before keyword because we use \"function\" inside the look-forward\n  'function-variable': {\n    pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n    alias: 'function'\n  },\n  'parameter': [{\n    pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }, {\n    pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n    lookbehind: true,\n    inside: Prism.languages.javascript\n  }],\n  'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nPrism.languages.insertBefore('javascript', 'string', {\n  'template-string': {\n    pattern: /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\\${)[^\\\\`])*`/,\n    greedy: true,\n    inside: {\n      'template-punctuation': {\n        pattern: /^`|`$/,\n        alias: 'string'\n      },\n      'interpolation': {\n        pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,\n        lookbehind: true,\n        inside: {\n          'interpolation-punctuation': {\n            pattern: /^\\${|}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.javascript\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  }\n});\n\nif (Prism.languages.markup) {\n  Prism.languages.markup.tag.addInlined('script', 'javascript');\n}\n\nPrism.languages.js = Prism.languages.javascript;\n/* \"prismjs/components/prism-jsx\" */\n\n(function (Prism) {\n  var javascript = Prism.util.clone(Prism.languages.javascript);\n  Prism.languages.jsx = Prism.languages.extend('markup', javascript);\n  Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i;\n  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i;\n  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i;\n  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/;\n  Prism.languages.insertBefore('inside', 'attr-name', {\n    'spread': {\n      pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n      inside: {\n        'punctuation': /\\.{3}|[{}.]/,\n        'attr-value': /\\w+/\n      }\n    }\n  }, Prism.languages.jsx.tag);\n  Prism.languages.insertBefore('inside', 'attr-value', {\n    'script': {\n      // Allow for two levels of nesting\n      pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n      inside: {\n        'script-punctuation': {\n          pattern: /^=(?={)/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.jsx\n      },\n      'alias': 'language-javascript'\n    }\n  }, Prism.languages.jsx.tag); // The following will handle plain text inside tags\n\n  var stringifyToken = function (token) {\n    if (!token) {\n      return '';\n    }\n\n    if (typeof token === 'string') {\n      return token;\n    }\n\n    if (typeof token.content === 'string') {\n      return token.content;\n    }\n\n    return token.content.map(stringifyToken).join('');\n  };\n\n  var walkTokens = function (tokens) {\n    var openedTags = [];\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n      var notTagNorBrace = false;\n\n      if (typeof token !== 'string') {\n        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n          // We found a tag, now find its kind\n          if (token.content[0].content[0].content === '</') {\n            // Closing tag\n            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n              // Pop matching opening tag\n              openedTags.pop();\n            }\n          } else {\n            if (token.content[token.content.length - 1].content === '/>') ; else {\n              // Opening tag\n              openedTags.push({\n                tagName: stringifyToken(token.content[0].content[1]),\n                openedBraces: 0\n              });\n            }\n          }\n        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {\n          // Here we might have entered a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces++;\n        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n          // Here we might have left a JSX context inside a tag\n          openedTags[openedTags.length - 1].openedBraces--;\n        } else {\n          notTagNorBrace = true;\n        }\n      }\n\n      if (notTagNorBrace || typeof token === 'string') {\n        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n          // Here we are inside a tag, and not inside a JSX context.\n          // That's plain text: drop any tokens matched.\n          var plainText = stringifyToken(token); // And merge text with adjacent text\n\n          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n            plainText += stringifyToken(tokens[i + 1]);\n            tokens.splice(i + 1, 1);\n          }\n\n          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n            plainText = stringifyToken(tokens[i - 1]) + plainText;\n            tokens.splice(i - 1, 1);\n            i--;\n          }\n\n          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n        }\n      }\n\n      if (token.content && typeof token.content !== 'string') {\n        walkTokens(token.content);\n      }\n    }\n  };\n\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'jsx' && env.language !== 'tsx') {\n      return;\n    }\n\n    walkTokens(env.tokens);\n  });\n})(Prism);\n/* \"prismjs/components/prism-javadoclike\" */\n\n\n(function (Prism) {\n  var javaDocLike = Prism.languages.javadoclike = {\n    'parameter': {\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:param|arg|arguments)\\s+)\\w+/m,\n      lookbehind: true\n    },\n    'keyword': {\n      // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n      // @word, {@word}\n      pattern: /(^\\s*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n      lookbehind: true\n    },\n    'punctuation': /[{}]/\n  };\n  /**\n   * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n   *\n   * @param {string} lang the language add doc comment support to.\n   * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n   */\n\n  function docCommentSupport(lang, callback) {\n    var tokenName = 'doc-comment';\n    var grammar = Prism.languages[lang];\n\n    if (!grammar) {\n      return;\n    }\n\n    var token = grammar[tokenName];\n\n    if (!token) {\n      // add doc comment: /** */\n      var definition = {};\n      definition[tokenName] = {\n        pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n        alias: 'comment'\n      };\n      grammar = Prism.languages.insertBefore(lang, 'comment', definition);\n      token = grammar[tokenName];\n    }\n\n    if (token instanceof RegExp) {\n      // convert regex to object\n      token = grammar[tokenName] = {\n        pattern: token\n      };\n    }\n\n    if (Array.isArray(token)) {\n      for (var i = 0, l = token.length; i < l; i++) {\n        if (token[i] instanceof RegExp) {\n          token[i] = {\n            pattern: token[i]\n          };\n        }\n\n        callback(token[i]);\n      }\n    } else {\n      callback(token);\n    }\n  }\n  /**\n   * Adds doc-comment support to the given languages for the given documentation language.\n   *\n   * @param {string[]|string} languages\n   * @param {Object} docLanguage\n   */\n\n\n  function addSupport(languages, docLanguage) {\n    if (typeof languages === 'string') {\n      languages = [languages];\n    }\n\n    languages.forEach(function (lang) {\n      docCommentSupport(lang, function (pattern) {\n        if (!pattern.inside) {\n          pattern.inside = {};\n        }\n\n        pattern.inside.rest = docLanguage;\n      });\n    });\n  }\n\n  Object.defineProperty(javaDocLike, 'addSupport', {\n    value: addSupport\n  });\n  javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike);\n})(Prism);\n/* \"prismjs/components/prism-java\" */\n\n\n(function (Prism) {\n  var keywords = /\\b(?:abstract|continue|for|new|switch|assert|default|goto|package|synchronized|boolean|do|if|private|this|break|double|implements|protected|throw|byte|else|import|public|throws|case|enum|instanceof|return|transient|catch|extends|int|short|try|char|final|interface|static|void|class|finally|long|strictfp|volatile|const|float|native|super|while|var|null|exports|module|open|opens|provides|requires|to|transitive|uses|with)\\b/; // based on the java naming conventions\n\n  var className = /\\b[A-Z](?:\\w*[a-z]\\w*)?\\b/;\n  Prism.languages.java = Prism.languages.extend('clike', {\n    'class-name': [className, // variables and parameters\n    // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)\n    /\\b[A-Z]\\w*(?=\\s+\\w+\\s*[;,=())])/],\n    'keyword': keywords,\n    'function': [Prism.languages.clike.function, {\n      pattern: /(\\:\\:)[a-z_]\\w*/,\n      lookbehind: true\n    }],\n    'number': /\\b0b[01][01_]*L?\\b|\\b0x[\\da-f_]*\\.?[\\da-f_p+-]+\\b|(?:\\b\\d[\\d_]*\\.?[\\d_]*|\\B\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[dfl]?/i,\n    'operator': {\n      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|([-+&|])\\2|[?:~]|[-+*/%&|^!=<>]=?)/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('java', 'class-name', {\n    'annotation': {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    },\n    'namespace': {\n      pattern: /(\\b(?:exports|import(?:\\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\\s+)[a-z]\\w*(\\.[a-z]\\w*)+/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    },\n    'generics': {\n      pattern: /<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<(?:[\\w\\s,.&?]|<[\\w\\s,.&?]*>)*>)*>)*>/,\n      inside: {\n        'class-name': className,\n        'keyword': keywords,\n        'punctuation': /[<>(),.:]/,\n        'operator': /[?&|]/\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-markup-templating\" */\n\n\n(function (Prism) {\n  /**\n   * Returns the placeholder for the given language id and index.\n   *\n   * @param {string} language\n   * @param {string|number} index\n   * @returns {string}\n   */\n  function getPlaceholder(language, index) {\n    return '___' + language.toUpperCase() + index + '___';\n  }\n\n  Object.defineProperties(Prism.languages['markup-templating'] = {}, {\n    buildPlaceholders: {\n      /**\n       * Tokenize all inline templating expressions matching `placeholderPattern`.\n       *\n       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n       * `true` will be replaced.\n       *\n       * @param {object} env The environment of the `before-tokenize` hook.\n       * @param {string} language The language id.\n       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n       * @param {(match: string) => boolean} [replaceFilter]\n       */\n      value: function (env, language, placeholderPattern, replaceFilter) {\n        if (env.language !== language) {\n          return;\n        }\n\n        var tokenStack = env.tokenStack = [];\n        env.code = env.code.replace(placeholderPattern, function (match) {\n          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n            return match;\n          }\n\n          var i = tokenStack.length;\n          var placeholder; // Check for existing strings\n\n          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {\n            ++i;\n          } // Create a sparse array\n\n\n          tokenStack[i] = match;\n          return placeholder;\n        }); // Switch the grammar to markup\n\n        env.grammar = Prism.languages.markup;\n      }\n    },\n    tokenizePlaceholders: {\n      /**\n       * Replace placeholders with proper tokens after tokenizing.\n       *\n       * @param {object} env The environment of the `after-tokenize` hook.\n       * @param {string} language The language id.\n       */\n      value: function (env, language) {\n        if (env.language !== language || !env.tokenStack) {\n          return;\n        } // Switch the grammar back\n\n\n        env.grammar = Prism.languages[language];\n        var j = 0;\n        var keys = Object.keys(env.tokenStack);\n\n        function walkTokens(tokens) {\n          for (var i = 0; i < tokens.length; i++) {\n            // all placeholders are replaced already\n            if (j >= keys.length) {\n              break;\n            }\n\n            var token = tokens[i];\n\n            if (typeof token === 'string' || token.content && typeof token.content === 'string') {\n              var k = keys[j];\n              var t = env.tokenStack[k];\n              var s = typeof token === 'string' ? token : token.content;\n              var placeholder = getPlaceholder(language, k);\n              var index = s.indexOf(placeholder);\n\n              if (index > -1) {\n                ++j;\n                var before = s.substring(0, index);\n                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);\n                var after = s.substring(index + placeholder.length);\n                var replacement = [];\n\n                if (before) {\n                  replacement.push.apply(replacement, walkTokens([before]));\n                }\n\n                replacement.push(middle);\n\n                if (after) {\n                  replacement.push.apply(replacement, walkTokens([after]));\n                }\n\n                if (typeof token === 'string') {\n                  tokens.splice.apply(tokens, [i, 1].concat(replacement));\n                } else {\n                  token.content = replacement;\n                }\n              }\n            } else if (token.content\n            /* && typeof token.content !== 'string' */\n            ) {\n                walkTokens(token.content);\n              }\n          }\n\n          return tokens;\n        }\n\n        walkTokens(env.tokens);\n      }\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-php\" */\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n\n\n(function (Prism) {\n  Prism.languages.php = Prism.languages.extend('clike', {\n    'keyword': /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n    'boolean': {\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'constant'\n    },\n    'constant': [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n    'comment': {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('php', 'string', {\n    'shell-comment': {\n      pattern: /(^|[^\\\\])#.*/,\n      lookbehind: true,\n      alias: 'comment'\n    }\n  });\n  Prism.languages.insertBefore('php', 'comment', {\n    'delimiter': {\n      pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n      alias: 'important'\n    }\n  });\n  Prism.languages.insertBefore('php', 'keyword', {\n    'variable': /\\$+(?:\\w+\\b|(?={))/i,\n    'package': {\n      pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\\\/\n      }\n    }\n  }); // Must be defined after the function pattern\n\n  Prism.languages.insertBefore('php', 'operator', {\n    'property': {\n      pattern: /(->)[\\w]+/,\n      lookbehind: true\n    }\n  });\n  var string_interpolation = {\n    pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n    lookbehind: true,\n    inside: {\n      rest: Prism.languages.php\n    }\n  };\n  Prism.languages.insertBefore('php', 'string', {\n    'nowdoc-string': {\n      pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<'?|[';]$/\n          }\n        }\n      }\n    },\n    'heredoc-string': {\n      pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'delimiter': {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            'punctuation': /^<<<\"?|[\";]$/\n          }\n        },\n        'interpolation': string_interpolation // See below\n\n      }\n    },\n    'single-quoted-string': {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'double-quoted-string': {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        'interpolation': string_interpolation // See below\n\n      }\n    }\n  }); // The different types of PHP strings \"replace\" the C-like standard string\n\n  delete Prism.languages.php['string'];\n  Prism.hooks.add('before-tokenize', function (env) {\n    if (!/<\\?/.test(env.code)) {\n      return;\n    }\n\n    var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/ig;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n  });\n})(Prism);\n/* \"prismjs/components/prism-jsdoc\" */\n\n\n(function (Prism) {\n  var javascript = Prism.languages.javascript;\n  var type = /{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})+}/.source;\n  var parameterPrefix = '(@(?:param|arg|argument|property)\\\\s+(?:' + type + '\\\\s+)?)';\n  Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n    'parameter': {\n      // @param {string} foo - foo bar\n      pattern: RegExp(parameterPrefix + /[$\\w\\xA0-\\uFFFF.]+(?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }\n  });\n  Prism.languages.insertBefore('jsdoc', 'keyword', {\n    'optional-parameter': {\n      // @param {string} [baz.foo=\"bar\"] foo bar\n      pattern: RegExp(parameterPrefix + /\\[[$\\w\\xA0-\\uFFFF.]+(?:=[^[\\]]+)?\\](?=\\s|$)/.source),\n      lookbehind: true,\n      inside: {\n        'parameter': {\n          pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\./\n          }\n        },\n        'code': {\n          pattern: /(=)[\\s\\S]*(?=\\]$)/,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        },\n        'punctuation': /[=[\\]]/\n      }\n    },\n    'class-name': [{\n      pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.,:?=<>|{}()[\\]]/\n      }\n    }, {\n      pattern: /(@(?:augments|extends|class|interface|memberof!?|this)\\s+)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/,\n      lookbehind: true,\n      inside: {\n        'punctuation': /\\./\n      }\n    }],\n    'example': {\n      pattern: /(@example\\s+)[^@]+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n      lookbehind: true,\n      inside: {\n        'code': {\n          pattern: /^(\\s*(?:\\*\\s*)?).+$/m,\n          lookbehind: true,\n          inside: javascript,\n          alias: 'language-javascript'\n        }\n      }\n    }\n  });\n  Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc);\n})(Prism);\n/* \"prismjs/components/prism-actionscript\" */\n\n\nPrism.languages.actionscript = Prism.languages.extend('javascript', {\n  'keyword': /\\b(?:as|break|case|catch|class|const|default|delete|do|else|extends|finally|for|function|if|implements|import|in|instanceof|interface|internal|is|native|new|null|package|private|protected|public|return|super|switch|this|throw|try|typeof|use|var|void|while|with|dynamic|each|final|get|include|namespace|native|override|set|static)\\b/,\n  'operator': /\\+\\+|--|(?:[+\\-*\\/%^]|&&?|\\|\\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/\n});\nPrism.languages.actionscript['class-name'].alias = 'function';\n\nif (Prism.languages.markup) {\n  Prism.languages.insertBefore('actionscript', 'string', {\n    'xml': {\n      pattern: /(^|[^.])<\\/?\\w+(?:\\s+[^\\s>\\/=]+=(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\])*\\2)*\\s*\\/?>/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.markup\n      }\n    }\n  });\n}\n/* \"prismjs/components/prism-coffeescript\" */\n\n\n(function (Prism) {\n  // Ignore comments starting with { to privilege string interpolation highlighting\n  var comment = /#(?!\\{).+/,\n      interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    alias: 'variable'\n  };\n  Prism.languages.coffeescript = Prism.languages.extend('javascript', {\n    'comment': comment,\n    'string': [// Strings are multiline\n    {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      greedy: true\n    }, {\n      // Strings are multiline\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }],\n    'keyword': /\\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n    'class-member': {\n      pattern: /@(?!\\d)\\w+/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'comment', {\n    'multiline-comment': {\n      pattern: /###[\\s\\S]+?###/,\n      alias: 'comment'\n    },\n    // Block regexp can contain comments and interpolation\n    'block-regex': {\n      pattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n      alias: 'regex',\n      inside: {\n        'comment': comment,\n        'interpolation': interpolation\n      }\n    }\n  });\n  Prism.languages.insertBefore('coffeescript', 'string', {\n    'inline-javascript': {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      inside: {\n        'delimiter': {\n          pattern: /^`|`$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.javascript\n      }\n    },\n    // Block strings\n    'multiline-string': [{\n      pattern: /'''[\\s\\S]*?'''/,\n      greedy: true,\n      alias: 'string'\n    }, {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string',\n      inside: {\n        interpolation: interpolation\n      }\n    }]\n  });\n  Prism.languages.insertBefore('coffeescript', 'keyword', {\n    // Object property\n    'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n  });\n  delete Prism.languages.coffeescript['template-string'];\n  Prism.languages.coffee = Prism.languages.coffeescript;\n})(Prism);\n/* \"prismjs/components/prism-js-extras\" */\n\n\n(function (Prism) {\n  Prism.languages.insertBefore('javascript', 'function-variable', {\n    'method-variable': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function-variable'].pattern.source),\n      lookbehind: true,\n      alias: ['function-variable', 'method', 'function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'function', {\n    'method': {\n      pattern: RegExp('(\\\\.\\\\s*)' + Prism.languages.javascript['function'].source),\n      lookbehind: true,\n      alias: ['function', 'property-access']\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'constant', {\n    'known-class-name': [{\n      // standard built-ins\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\n      pattern: /\\b(?:(?:(?:Uint|Int)(?:8|16|32)|Uint8Clamped|Float(?:32|64))?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|(?:Weak)?(?:Set|Map)|WebAssembly)\\b/,\n      alias: 'class-name'\n    }, {\n      // errors\n      pattern: /\\b(?:[A-Z]\\w*)Error\\b/,\n      alias: 'class-name'\n    }]\n  });\n  Prism.languages.javascript['keyword'].unshift({\n    pattern: /\\b(?:as|default|export|from|import)\\b/,\n    alias: 'module'\n  }, {\n    pattern: /\\bnull\\b/,\n    alias: ['null', 'nil']\n  }, {\n    pattern: /\\bundefined\\b/,\n    alias: 'nil'\n  });\n  Prism.languages.insertBefore('javascript', 'operator', {\n    'spread': {\n      pattern: /\\.{3}/,\n      alias: 'operator'\n    },\n    'arrow': {\n      pattern: /=>/,\n      alias: 'operator'\n    }\n  });\n  Prism.languages.insertBefore('javascript', 'punctuation', {\n    'property-access': {\n      pattern: /(\\.\\s*)#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n      lookbehind: true\n    },\n    'maybe-class-name': {\n      pattern: /(^|[^$\\w\\xA0-\\uFFFF])[A-Z][$\\w\\xA0-\\uFFFF]+/,\n      lookbehind: true\n    },\n    'dom': {\n      // this contains only a few commonly used DOM variables\n      pattern: /\\b(?:document|location|navigator|performance|(?:local|session)Storage|window)\\b/,\n      alias: 'variable'\n    },\n    'console': {\n      pattern: /\\bconsole(?=\\s*\\.)/,\n      alias: 'class-name'\n    }\n  }); // add 'maybe-class-name' to tokens which might be a class name\n\n  var maybeClassNameTokens = ['function', 'function-variable', 'method', 'method-variable', 'property-access'];\n\n  for (var i = 0; i < maybeClassNameTokens.length; i++) {\n    var token = maybeClassNameTokens[i];\n    var value = Prism.languages.javascript[token]; // convert regex to object\n\n    if (Prism.util.type(value) === 'RegExp') {\n      value = Prism.languages.javascript[token] = {\n        pattern: value\n      };\n    } // keep in mind that we don't support arrays\n\n\n    var inside = value.inside || {};\n    value.inside = inside;\n    inside['maybe-class-name'] = /^[A-Z][\\s\\S]*/;\n  }\n})(Prism);\n/* \"prismjs/components/prism-flow\" */\n\n\n(function (Prism) {\n  Prism.languages.flow = Prism.languages.extend('javascript', {});\n  Prism.languages.insertBefore('flow', 'keyword', {\n    'type': [{\n      pattern: /\\b(?:[Nn]umber|[Ss]tring|[Bb]oolean|Function|any|mixed|null|void)\\b/,\n      alias: 'tag'\n    }]\n  });\n  Prism.languages.flow['function-variable'].pattern = /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=\\s*(?:function\\b|(?:\\([^()]*\\)(?:\\s*:\\s*\\w+)?|[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/i;\n  delete Prism.languages.flow['parameter'];\n  Prism.languages.insertBefore('flow', 'operator', {\n    'flow-punctuation': {\n      pattern: /\\{\\||\\|\\}/,\n      alias: 'punctuation'\n    }\n  });\n\n  if (!Array.isArray(Prism.languages.flow.keyword)) {\n    Prism.languages.flow.keyword = [Prism.languages.flow.keyword];\n  }\n\n  Prism.languages.flow.keyword.unshift({\n    pattern: /(^|[^$]\\b)(?:type|opaque|declare|Class)\\b(?!\\$)/,\n    lookbehind: true\n  }, {\n    pattern: /(^|[^$]\\B)\\$(?:await|Diff|Exact|Keys|ObjMap|PropertyType|Shape|Record|Supertype|Subtype|Enum)\\b(?!\\$)/,\n    lookbehind: true\n  });\n})(Prism);\n/* \"prismjs/components/prism-n4js\" */\n\n\nPrism.languages.n4js = Prism.languages.extend('javascript', {\n  // Keywords from N4JS language spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html\n  'keyword': /\\b(?:any|Array|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\\b/\n});\nPrism.languages.insertBefore('n4js', 'constant', {\n  // Annotations in N4JS spec: https://numberfour.github.io/n4js/spec/N4JSSpec.html#_annotations\n  'annotation': {\n    pattern: /@+\\w+/,\n    alias: 'operator'\n  }\n});\nPrism.languages.n4jsd = Prism.languages.n4js;\n/* \"prismjs/components/prism-typescript\" */\n\nPrism.languages.typescript = Prism.languages.extend('javascript', {\n  // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n  'keyword': /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n  'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nPrism.languages.ts = Prism.languages.typescript;\n/* \"prismjs/components/prism-js-templates\" */\n\n(function (Prism) {\n  var templateString = Prism.languages.javascript['template-string']; // see the pattern in prism-javascript.js\n\n  var templateLiteralPattern = templateString.pattern.source;\n  var interpolationObject = templateString.inside['interpolation'];\n  var interpolationPunctuationObject = interpolationObject.inside['interpolation-punctuation'];\n  var interpolationPattern = interpolationObject.pattern.source;\n  /**\n   * Creates a new pattern to match a template string with a special tag.\n   *\n   * This will return `undefined` if there is no grammar with the given language id.\n   *\n   * @param {string} language The language id of the embedded language. E.g. `markdown`.\n   * @param {string} tag The regex pattern to match the tag.\n   * @returns {object | undefined}\n   * @example\n   * createTemplate('css', /\\bcss/.source);\n   */\n\n  function createTemplate(language, tag) {\n    if (!Prism.languages[language]) {\n      return undefined;\n    }\n\n    return {\n      pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'template-punctuation': {\n          pattern: /^`|`$/,\n          alias: 'string'\n        },\n        'embedded-code': {\n          pattern: /[\\s\\S]+/,\n          alias: language\n        }\n      }\n    };\n  }\n\n  Prism.languages.javascript['template-string'] = [// styled-jsx:\n  //   css`a { color: #25F; }`\n  // styled-components:\n  //   styled.h1`color: red;`\n  createTemplate('css', /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source), // html`<p></p>`\n  // div.innerHTML = `<p></p>`\n  createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n  createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n  createTemplate('markdown', /\\b(?:md|markdown)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n  createTemplate('graphql', /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source), // vanilla template string\n  templateString].filter(Boolean);\n  /**\n   * Returns a specific placeholder literal for the given language.\n   *\n   * @param {number} counter\n   * @param {string} language\n   * @returns {string}\n   */\n\n  function getPlaceholder(counter, language) {\n    return '___' + language.toUpperCase() + '_' + counter + '___';\n  }\n  /**\n   * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n   *\n   * @param {string} code\n   * @param {any} grammar\n   * @param {string} language\n   * @returns {(string|Token)[]}\n   */\n\n\n  function tokenizeWithHooks(code, grammar, language) {\n    var env = {\n      code: code,\n      grammar: grammar,\n      language: language\n    };\n    Prism.hooks.run('before-tokenize', env);\n    env.tokens = Prism.tokenize(env.code, env.grammar);\n    Prism.hooks.run('after-tokenize', env);\n    return env.tokens;\n  }\n  /**\n   * Returns the token of the given JavaScript interpolation expression.\n   *\n   * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n   * @returns {Token}\n   */\n\n\n  function tokenizeInterpolationExpression(expression) {\n    var tempGrammar = {};\n    tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject;\n    /** @type {Array} */\n\n    var tokens = Prism.tokenize(expression, tempGrammar);\n\n    if (tokens.length === 3) {\n      /**\n       * The token array will look like this\n       * [\n       *     [\"interpolation-punctuation\", \"${\"]\n       *     \"...\" // JavaScript expression of the interpolation\n       *     [\"interpolation-punctuation\", \"}\"]\n       * ]\n       */\n      var args = [1, 1];\n      args.push.apply(args, tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript'));\n      tokens.splice.apply(tokens, args);\n    }\n\n    return new Prism.Token('interpolation', tokens, interpolationObject.alias, expression);\n  }\n  /**\n   * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n   *\n   * This function has 3 phases:\n   *\n   * 1. Replace all JavaScript interpolation expression with a placeholder.\n   *    The placeholder will have the syntax of a identify of the target language.\n   * 2. Tokenize the code with placeholders.\n   * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n   *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n   *    tokenized as two tokens by the grammar of the embedded language.\n   *\n   * @param {string} code\n   * @param {object} grammar\n   * @param {string} language\n   * @returns {Token}\n   */\n\n\n  function tokenizeEmbedded(code, grammar, language) {\n    // 1. First filter out all interpolations\n    // because they might be escaped, we need a lookbehind, so we use Prism\n\n    /** @type {(Token|string)[]} */\n    var _tokens = Prism.tokenize(code, {\n      'interpolation': {\n        pattern: RegExp(interpolationPattern),\n        lookbehind: true\n      }\n    }); // replace all interpolations with a placeholder which is not in the code already\n\n\n    var placeholderCounter = 0;\n    /** @type {Object<string, string>} */\n\n    var placeholderMap = {};\n\n    var embeddedCode = _tokens.map(function (token) {\n      if (typeof token === 'string') {\n        return token;\n      } else {\n        var interpolationExpression = token.content;\n        var placeholder;\n\n        while (code.indexOf(placeholder = getPlaceholder(placeholderCounter++, language)) !== -1) {}\n\n        placeholderMap[placeholder] = interpolationExpression;\n        return placeholder;\n      }\n    }).join(''); // 2. Tokenize the embedded code\n\n\n    var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language); // 3. Re-insert the interpolation\n\n    var placeholders = Object.keys(placeholderMap);\n    placeholderCounter = 0;\n    /**\n     *\n     * @param {(Token|string)[]} tokens\n     * @returns {void}\n     */\n\n    function walkTokens(tokens) {\n      for (var i = 0; i < tokens.length; i++) {\n        if (placeholderCounter >= placeholders.length) {\n          return;\n        }\n\n        var token = tokens[i];\n\n        if (typeof token === 'string' || typeof token.content === 'string') {\n          var placeholder = placeholders[placeholderCounter];\n          var s = typeof token === 'string' ? token :\n          /** @type {string} */\n          token.content;\n          var index = s.indexOf(placeholder);\n\n          if (index !== -1) {\n            ++placeholderCounter;\n            var before = s.substring(0, index);\n            var middle = tokenizeInterpolationExpression(placeholderMap[placeholder]);\n            var after = s.substring(index + placeholder.length);\n            var replacement = [];\n\n            if (before) {\n              replacement.push(before);\n            }\n\n            replacement.push(middle);\n\n            if (after) {\n              var afterTokens = [after];\n              walkTokens(afterTokens);\n              replacement.push.apply(replacement, afterTokens);\n            }\n\n            if (typeof token === 'string') {\n              tokens.splice.apply(tokens, [i, 1].concat(replacement));\n              i += replacement.length - 1;\n            } else {\n              token.content = replacement;\n            }\n          }\n        } else {\n          var content = token.content;\n\n          if (Array.isArray(content)) {\n            walkTokens(content);\n          } else {\n            walkTokens([content]);\n          }\n        }\n      }\n    }\n\n    walkTokens(embeddedTokens);\n    return new Prism.Token(language, embeddedTokens, 'language-' + language, code);\n  }\n  /**\n   * The languages for which JS templating will handle tagged template literals.\n   *\n   * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n   */\n\n\n  var supportedLanguages = {\n    'javascript': true,\n    'js': true,\n    'typescript': true,\n    'ts': true,\n    'jsx': true,\n    'tsx': true\n  };\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (!(env.language in supportedLanguages)) {\n      return;\n    }\n    /**\n     * Finds and tokenizes all template strings with an embedded languages.\n     *\n     * @param {(Token | string)[]} tokens\n     * @returns {void}\n     */\n\n\n    function findTemplateStrings(tokens) {\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (typeof token === 'string') {\n          continue;\n        }\n\n        var content = token.content;\n\n        if (!Array.isArray(content)) {\n          if (typeof content !== 'string') {\n            findTemplateStrings([content]);\n          }\n\n          continue;\n        }\n\n        if (token.type === 'template-string') {\n          /**\n           * A JavaScript template-string token will look like this:\n           *\n           * [\"template-string\", [\n           *     [\"template-punctuation\", \"`\"],\n           *     (\n           *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n           *         or\n           *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n           *                                  It also has an alias which is the language of the embedded code.\n           *     ),\n           *     [\"template-punctuation\", \"`\"]\n           * ]]\n           */\n          var embedded = content[1];\n\n          if (content.length === 3 && typeof embedded !== 'string' && embedded.type === 'embedded-code') {\n            // get string content\n            var code = stringContent(embedded);\n            var alias = embedded.alias;\n            var language = Array.isArray(alias) ? alias[0] : alias;\n            var grammar = Prism.languages[language];\n\n            if (!grammar) {\n              // the embedded language isn't registered.\n              continue;\n            }\n\n            content[1] = tokenizeEmbedded(code, grammar, language);\n          }\n        } else {\n          findTemplateStrings(content);\n        }\n      }\n    }\n\n    findTemplateStrings(env.tokens);\n  });\n  /**\n   * Returns the string content of a token or token stream.\n   *\n   * @param {string | Token | (string | Token)[]} value\n   * @returns {string}\n   */\n\n  function stringContent(value) {\n    if (typeof value === 'string') {\n      return value;\n    } else if (Array.isArray(value)) {\n      return value.map(stringContent).join('');\n    } else {\n      return stringContent(value.content);\n    }\n  }\n})(Prism);\n/* \"prismjs/components/prism-graphql\" */\n\n\nPrism.languages.graphql = {\n  'comment': /#.*/,\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n    greedy: true\n  },\n  'number': /(?:\\B-|\\b)\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?\\b/i,\n  'boolean': /\\b(?:true|false)\\b/,\n  'variable': /\\$[a-z_]\\w*/i,\n  'directive': {\n    pattern: /@[a-z_]\\w*/i,\n    alias: 'function'\n  },\n  'attr-name': {\n    pattern: /[a-z_]\\w*(?=\\s*(?:\\((?:[^()\"]|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")*\\))?:)/i,\n    greedy: true\n  },\n  'class-name': {\n    pattern: /(\\b(?:enum|implements|interface|on|scalar|type|union)\\s+)[a-zA-Z_]\\w*/,\n    lookbehind: true\n  },\n  'fragment': {\n    pattern: /(\\bfragment\\s+|\\.{3}\\s*(?!on\\b))[a-zA-Z_]\\w*/,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:enum|fragment|implements|input|interface|mutation|on|query|scalar|schema|type|union)\\b/,\n  'operator': /[!=|]|\\.{3}/,\n  'punctuation': /[!(){}\\[\\]:=,]/,\n  'constant': /\\b(?!ID\\b)[A-Z][A-Z_\\d]*\\b/\n};\n/* \"prismjs/components/prism-markdown\" */\n\n(function (Prism) {\n  // Allow only one line break\n  var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\r?\\n|\\r)(?!\\r?\\n|\\r))/.source;\n  /**\n   * This function is intended for the creation of the bold or italic pattern.\n   *\n   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n   *\n   * _Note:_ Keep in mind that this adds a capturing group.\n   *\n   * @param {string} pattern\n   * @param {boolean} starAlternative Whether to also add an alternative where all `_`s are replaced with `*`s.\n   * @returns {RegExp}\n   */\n\n  function createInline(pattern, starAlternative) {\n    pattern = pattern.replace(/<inner>/g, inner);\n\n    if (starAlternative) {\n      pattern = pattern + '|' + pattern.replace(/_/g, '\\\\*');\n    }\n\n    return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n  }\n\n  var tableCell = /(?:\\\\.|``.+?``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n  var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\r?\\n|\\r)|$)/.source.replace(/__/g, tableCell);\n  var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\r?\\n|\\r)/.source;\n  Prism.languages.markdown = Prism.languages.extend('markup', {});\n  Prism.languages.insertBefore('markdown', 'prolog', {\n    'blockquote': {\n      // > ...\n      pattern: /^>(?:[\\t ]*>)*/m,\n      alias: 'punctuation'\n    },\n    'table': {\n      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n      inside: {\n        'table-data-rows': {\n          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n          lookbehind: true,\n          inside: {\n            'table-data': {\n              pattern: RegExp(tableCell),\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        },\n        'table-line': {\n          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n          lookbehind: true,\n          inside: {\n            'punctuation': /\\||:?-{3,}:?/\n          }\n        },\n        'table-header-row': {\n          pattern: RegExp('^' + tableRow + '$'),\n          inside: {\n            'table-header': {\n              pattern: RegExp(tableCell),\n              alias: 'important',\n              inside: Prism.languages.markdown\n            },\n            'punctuation': /\\|/\n          }\n        }\n      }\n    },\n    'code': [{\n      // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n      pattern: /(^[ \\t]*(?:\\r?\\n|\\r))(?: {4}|\\t).+(?:(?:\\r?\\n|\\r)(?: {4}|\\t).+)*/m,\n      lookbehind: true,\n      alias: 'keyword'\n    }, {\n      // `code`\n      // ``code``\n      pattern: /``.+?``|`[^`\\r\\n]+`/,\n      alias: 'keyword'\n    }, {\n      // ```optional language\n      // code block\n      // ```\n      pattern: /^```[\\s\\S]*?^```$/m,\n      greedy: true,\n      inside: {\n        'code-block': {\n          pattern: /^(```.*(?:\\r?\\n|\\r))[\\s\\S]+?(?=(?:\\r?\\n|\\r)^```$)/m,\n          lookbehind: true\n        },\n        'code-language': {\n          pattern: /^(```).+/,\n          lookbehind: true\n        },\n        'punctuation': /```/\n      }\n    }],\n    'title': [{\n      // title 1\n      // =======\n      // title 2\n      // -------\n      pattern: /\\S.*(?:\\r?\\n|\\r)(?:==+|--+)(?=[ \\t]*$)/m,\n      alias: 'important',\n      inside: {\n        punctuation: /==+$|--+$/\n      }\n    }, {\n      // # title 1\n      // ###### title 6\n      pattern: /(^\\s*)#+.+/m,\n      lookbehind: true,\n      alias: 'important',\n      inside: {\n        punctuation: /^#+|#+$/\n      }\n    }],\n    'hr': {\n      // ***\n      // ---\n      // * * *\n      // -----------\n      pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'list': {\n      // * item\n      // + item\n      // - item\n      // 1. item\n      pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'url-reference': {\n      // [id]: http://example.com \"Optional title\"\n      // [id]: http://example.com 'Optional title'\n      // [id]: http://example.com (Optional title)\n      // [id]: <http://example.com> \"Optional title\"\n      pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n      inside: {\n        'variable': {\n          pattern: /^(!?\\[)[^\\]]+/,\n          lookbehind: true\n        },\n        'string': /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n        'punctuation': /^[\\[\\]!:]|[<>]/\n      },\n      alias: 'url'\n    },\n    'bold': {\n      // **strong**\n      // __strong__\n      // allow one nested instance of italic text using the same delimiter\n      pattern: createInline(/__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__/.source, true),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^..)[\\s\\S]+(?=..$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /\\*\\*|__/\n      }\n    },\n    'italic': {\n      // *em*\n      // _em_\n      // allow one nested instance of bold text using the same delimiter\n      pattern: createInline(/_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_/.source, true),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^.)[\\s\\S]+(?=.$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /[*_]/\n      }\n    },\n    'strike': {\n      // ~~strike through~~\n      // ~strike~\n      pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source, false),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'content': {\n          pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'punctuation': /~~?/\n      }\n    },\n    'url': {\n      // [example](http://example.com \"Optional title\")\n      // [example][id]\n      // [example] [id]\n      pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source, false),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'variable': {\n          pattern: /(\\[)[^\\]]+(?=\\]$)/,\n          lookbehind: true\n        },\n        'content': {\n          pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n          lookbehind: true,\n          inside: {} // see below\n\n        },\n        'string': {\n          pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n        }\n      }\n    }\n  });\n  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n    ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n      if (token !== inside) {\n        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n      }\n    });\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    if (env.language !== 'markdown' && env.language !== 'md') {\n      return;\n    }\n\n    function walkTokens(tokens) {\n      if (!tokens || typeof tokens === 'string') {\n        return;\n      }\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (token.type !== 'code') {\n          walkTokens(token.content);\n          continue;\n        }\n        /*\n         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n         * is optional. But the grammar is defined so that there is only one case we have to handle:\n         *\n         * token.content = [\n         *     <span class=\"punctuation\">```</span>,\n         *     <span class=\"code-language\">xxxx</span>,\n         *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n         *     <span class=\"code-block\">...</span>,\n         *     '\\n', // exactly one new lines again\n         *     <span class=\"punctuation\">```</span>\n         * ];\n         */\n\n\n        var codeLang = token.content[1];\n        var codeBlock = token.content[3];\n\n        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n          // this might be a language that Prism does not support\n          var alias = 'language-' + codeLang.content.trim().split(/\\s+/)[0].toLowerCase(); // add alias\n\n          if (!codeBlock.alias) {\n            codeBlock.alias = [alias];\n          } else if (typeof codeBlock.alias === 'string') {\n            codeBlock.alias = [codeBlock.alias, alias];\n          } else {\n            codeBlock.alias.push(alias);\n          }\n        }\n      }\n    }\n\n    walkTokens(env.tokens);\n  });\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type !== 'code-block') {\n      return;\n    }\n\n    var codeLang = '';\n\n    for (var i = 0, l = env.classes.length; i < l; i++) {\n      var cls = env.classes[i];\n      var match = /language-(.+)/.exec(cls);\n\n      if (match) {\n        codeLang = match[1];\n        break;\n      }\n    }\n\n    var grammar = Prism.languages[codeLang];\n\n    if (!grammar) {\n      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n        env.attributes['id'] = id;\n        Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n          var ele = document.getElementById(id);\n\n          if (ele) {\n            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n          }\n        });\n      }\n    } else {\n      // reverse Prism.util.encode\n      var code = env.content.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n      env.content = Prism.highlight(code, grammar, codeLang);\n    }\n  });\n  Prism.languages.md = Prism.languages.markdown;\n})(Prism);\n/* \"prismjs/components/prism-diff\" */\n\n\n(function (Prism) {\n  Prism.languages.diff = {\n    'coord': [// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n    /^(?:\\*{3}|-{3}|\\+{3}).*$/m, // Match \"@@ ... @@\" coord lines in unified diff.\n    /^@@.*@@$/m, // Match coord lines in normal diff (starts with a number).\n    /^\\d+.*$/m] // deleted, inserted, unchanged, diff\n\n  };\n  /**\n   * A map from the name of a block to its line prefix.\n   *\n   * @type {Object<string, string>}\n   */\n\n  var PREFIXES = {\n    'deleted-sign': '-',\n    'deleted-arrow': '<',\n    'inserted-sign': '+',\n    'inserted-arrow': '>',\n    'unchanged': ' ',\n    'diff': '!'\n  }; // add a token for each prefix\n\n  Object.keys(PREFIXES).forEach(function (name) {\n    var prefix = PREFIXES[name];\n    var alias = [];\n\n    if (!/^\\w+$/.test(name)) {\n      // \"deleted-sign\" -> \"deleted\"\n      alias.push(/\\w+/.exec(name)[0]);\n    }\n\n    if (name === \"diff\") {\n      alias.push(\"bold\");\n    }\n\n    Prism.languages.diff[name] = {\n      // pattern: /^(?:[_].*(?:\\r\\n?|\\n|(?![\\s\\S])))+/m\n      pattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n      alias: alias\n    };\n  }); // make prefixes available to Diff plugin\n\n  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {\n    value: PREFIXES\n  });\n})(Prism);\n/* \"prismjs/components/prism-git\" */\n\n\nPrism.languages.git = {\n  /*\n   * A simple one line comment like in a git status command\n   * For instance:\n   * $ git status\n   * # On branch infinite-scroll\n   * # Your branch and 'origin/sharedBranches/frontendTeam/infinite-scroll' have diverged,\n   * # and have 1 and 2 different commits each, respectively.\n   * nothing to commit (working directory clean)\n   */\n  'comment': /^#.*/m,\n\n  /*\n   * Regexp to match the changed lines in a git diff output. Check the example below.\n   */\n  'deleted': /^[-–].*/m,\n  'inserted': /^\\+.*/m,\n\n  /*\n   * a string (double and simple quote)\n   */\n  'string': /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/m,\n\n  /*\n   * a git command. It starts with a random prompt finishing by a $, then \"git\" then some other parameters\n   * For instance:\n   * $ git add file.txt\n   */\n  'command': {\n    pattern: /^.*\\$ git .*$/m,\n    inside: {\n      /*\n       * A git command can contain a parameter starting by a single or a double dash followed by a string\n       * For instance:\n       * $ git diff --cached\n       * $ git log -p\n       */\n      'parameter': /\\s--?\\w+/m\n    }\n  },\n\n  /*\n   * Coordinates displayed in a git diff command\n   * For instance:\n   * $ git diff\n   * diff --git file.txt file.txt\n   * index 6214953..1d54a52 100644\n   * --- file.txt\n   * +++ file.txt\n   * @@ -1 +1,2 @@\n   * -Here's my tetx file\n   * +Here's my text file\n   * +And this is the second line\n   */\n  'coord': /^@@.*@@$/m,\n\n  /*\n   * Match a \"commit [SHA1]\" line in a git log output.\n   * For instance:\n   * $ git log\n   * commit a11a14ef7e26f2ca62d4b35eac455ce636d0dc09\n   * Author: lgiraudel\n   * Date:   Mon Feb 17 11:18:34 2014 +0100\n   *\n   *     Add of a new line\n   */\n  'commit_sha1': /^commit \\w{40}$/m\n};\n/* \"prismjs/components/prism-go\" */\n\nPrism.languages.go = Prism.languages.extend('clike', {\n  'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n  'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/,\n  'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n  'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n  'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n  'string': {\n    pattern: /([\"'`])(\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n    greedy: true\n  }\n});\ndelete Prism.languages.go['class-name'];\n/* \"prismjs/components/prism-handlebars\" */\n\n(function (Prism) {\n  Prism.languages.handlebars = {\n    'comment': /\\{\\{![\\s\\S]*?\\}\\}/,\n    'delimiter': {\n      pattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n      alias: 'punctuation'\n    },\n    'string': /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    'number': /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'block': {\n      pattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    'brackets': {\n      pattern: /\\[[^\\]]+\\]/,\n      inside: {\n        punctuation: /\\[|\\]/,\n        variable: /[\\s\\S]+/\n      }\n    },\n    'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n    'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n  };\n  Prism.hooks.add('before-tokenize', function (env) {\n    var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n    Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n  });\n  Prism.hooks.add('after-tokenize', function (env) {\n    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n  });\n})(Prism);\n/* \"prismjs/components/prism-json\" */\n\n\nPrism.languages.json = {\n  'property': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    greedy: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"(?!\\s*:)/,\n    greedy: true\n  },\n  'comment': /\\/\\/.*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n  'number': /-?\\d+\\.?\\d*(e[+-]?\\d+)?/i,\n  'punctuation': /[{}[\\],]/,\n  'operator': /:/,\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  }\n};\n/* \"prismjs/components/prism-less\" */\n\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n  'comment': [/\\/\\*[\\s\\S]*?\\*\\//, {\n    pattern: /(^|[^\\\\])\\/\\/.*/,\n    lookbehind: true\n  }],\n  'atrule': {\n    pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n    inside: {\n      'punctuation': /[:()]/\n    }\n  },\n  // selectors and mixins are considered the same\n  'selector': {\n    pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n    inside: {\n      // mixin parameters\n      'variable': /@+[\\w-]+/\n    }\n  },\n  'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n  'operator': /[+\\-*\\/]/\n});\nPrism.languages.insertBefore('less', 'property', {\n  'variable': [// Variable declaration (the colon must be consumed!)\n  {\n    pattern: /@[\\w-]+\\s*:/,\n    inside: {\n      \"punctuation\": /:/\n    }\n  }, // Variable usage\n  /@@?[\\w-]+/],\n  'mixin-usage': {\n    pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n    lookbehind: true,\n    alias: 'function'\n  }\n});\n/* \"prismjs/components/prism-makefile\" */\n\nPrism.languages.makefile = {\n  'comment': {\n    pattern: /(^|[^\\\\])#(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n])*/,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true\n  },\n  // Built-in target names\n  'builtin': /\\.[A-Z][^:#=\\s]+(?=\\s*:(?!=))/,\n  // Targets\n  'symbol': {\n    pattern: /^[^:=\\r\\n]+(?=\\s*:(?!=))/m,\n    inside: {\n      'variable': /\\$+(?:[^(){}:#=\\s]+|(?=[({]))/\n    }\n  },\n  'variable': /\\$+(?:[^(){}:#=\\s]+|\\([@*%<^+?][DF]\\)|(?=[({]))/,\n  'keyword': [// Directives\n  /-include\\b|\\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\\b/, // Functions\n  {\n    pattern: /(\\()(?:addsuffix|abspath|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:s|list)?)(?=[ \\t])/,\n    lookbehind: true\n  }],\n  'operator': /(?:::|[?:+!])?=|[|@]/,\n  'punctuation': /[:;(){}]/\n};\n/* \"prismjs/components/prism-objectivec\" */\n\nPrism.languages.objectivec = Prism.languages.extend('c', {\n  'keyword': /\\b(?:asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while|in|self|super)\\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\\b/,\n  'string': /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|@\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n  'operator': /-[->]?|\\+\\+?|!=?|<<?=?|>>?=?|==?|&&?|\\|\\|?|[~^%?*\\/@]/\n});\ndelete Prism.languages.objectivec['class-name'];\n/* \"prismjs/components/prism-ocaml\" */\n\nPrism.languages.ocaml = {\n  'comment': /\\(\\*[\\s\\S]*?\\*\\)/,\n  'string': [{\n    pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  }, {\n    pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n    greedy: true\n  }],\n  'number': /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*\\.?[\\d_]*(?:e[+-]?[\\d_]+)?)/i,\n  'type': {\n    pattern: /\\B['`]\\w*/,\n    alias: 'variable'\n  },\n  'directive': {\n    pattern: /\\B#\\w+/,\n    alias: 'function'\n  },\n  'keyword': /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|object|of|open|prefix|private|rec|then|sig|struct|to|try|type|val|value|virtual|where|while|with)\\b/,\n  'boolean': /\\b(?:false|true)\\b/,\n  // Custom operators are allowed\n  'operator': /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lxor|lsl|lsr|mod|nor|or)\\b/,\n  'punctuation': /[(){}\\[\\]|_.,:;]/\n};\n/* \"prismjs/components/prism-python\" */\n\nPrism.languages.python = {\n  'comment': {\n    pattern: /(^|[^\\\\])#.*/,\n    lookbehind: true\n  },\n  'string-interpolation': {\n    pattern: /(?:f|rf|fr)(?:(\"\"\"|''')[\\s\\S]+?\\1|(\"|')(?:\\\\.|(?!\\2)[^\\\\\\r\\n])*\\2)/i,\n    greedy: true,\n    inside: {\n      'interpolation': {\n        // \"{\" <expression> <optional \"!s\", \"!r\", or \"!a\"> <optional \":\" format specifier> \"}\"\n        pattern: /((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,\n        lookbehind: true,\n        inside: {\n          'format-spec': {\n            pattern: /(:)[^:(){}]+(?=}$)/,\n            lookbehind: true\n          },\n          'conversion-option': {\n            pattern: /![sra](?=[:}]$)/,\n            alias: 'punctuation'\n          },\n          rest: null\n        }\n      },\n      'string': /[\\s\\S]+/\n    }\n  },\n  'triple-quoted-string': {\n    pattern: /(?:[rub]|rb|br)?(\"\"\"|''')[\\s\\S]+?\\1/i,\n    greedy: true,\n    alias: 'string'\n  },\n  'string': {\n    pattern: /(?:[rub]|rb|br)?(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/i,\n    greedy: true\n  },\n  'function': {\n    pattern: /((?:^|\\s)def[ \\t]+)[a-zA-Z_]\\w*(?=\\s*\\()/g,\n    lookbehind: true\n  },\n  'class-name': {\n    pattern: /(\\bclass\\s+)\\w+/i,\n    lookbehind: true\n  },\n  'decorator': {\n    pattern: /(^\\s*)@\\w+(?:\\.\\w+)*/i,\n    lookbehind: true,\n    alias: ['annotation', 'punctuation'],\n    inside: {\n      'punctuation': /\\./\n    }\n  },\n  'keyword': /\\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\\b/,\n  'builtin': /\\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\\b/,\n  'boolean': /\\b(?:True|False|None)\\b/,\n  'number': /(?:\\b(?=\\d)|\\B(?=\\.))(?:0[bo])?(?:(?:\\d|0x[\\da-f])[\\da-f]*\\.?\\d*|\\.\\d+)(?:e[+-]?\\d+)?j?\\b/i,\n  'operator': /[-+%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n  'punctuation': /[{}[\\];(),.:]/\n};\nPrism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;\nPrism.languages.py = Prism.languages.python;\n/* \"prismjs/components/prism-reason\" */\n\nPrism.languages.reason = Prism.languages.extend('clike', {\n  'comment': {\n    pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n    lookbehind: true\n  },\n  'string': {\n    pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\\\\\\r\\n\"])*\"/,\n    greedy: true\n  },\n  // 'class-name' must be matched *after* 'constructor' defined below\n  'class-name': /\\b[A-Z]\\w*/,\n  'keyword': /\\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\\b/,\n  'operator': /\\.{3}|:[:=]|\\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\\-*\\/]\\.?|\\b(?:mod|land|lor|lxor|lsl|lsr|asr)\\b/\n});\nPrism.languages.insertBefore('reason', 'class-name', {\n  'character': {\n    pattern: /'(?:\\\\x[\\da-f]{2}|\\\\o[0-3][0-7][0-7]|\\\\\\d{3}|\\\\.|[^'\\\\\\r\\n])'/,\n    alias: 'string'\n  },\n  'constructor': {\n    // Negative look-ahead prevents from matching things like String.capitalize\n    pattern: /\\b[A-Z]\\w*\\b(?!\\s*\\.)/,\n    alias: 'variable'\n  },\n  'label': {\n    pattern: /\\b[a-z]\\w*(?=::)/,\n    alias: 'symbol'\n  }\n}); // We can't match functions property, so let's not even try.\n\ndelete Prism.languages.reason.function;\n/* \"prismjs/components/prism-sass\" */\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s+)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n/* \"prismjs/components/prism-scss\" */\n\n\nPrism.languages.scss = Prism.languages.extend('css', {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n    lookbehind: true\n  },\n  'atrule': {\n    pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n    inside: {\n      'rule': /@[\\w-]+/ // See rest below\n\n    }\n  },\n  // url, compassified\n  'url': /(?:[-a-z]+-)?url(?=\\()/i,\n  // CSS selector regex is not appropriate for Sass\n  // since there can be lot more things (var, @ directive, nesting..)\n  // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n  // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n  // can \"pass\" as a selector- e.g: proper#{$erty})\n  // this one was hard to do, so please be careful if you edit this one :)\n  'selector': {\n    // Initial look-ahead is used to prevent matching of blank selectors\n    pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n    inside: {\n      'parent': {\n        pattern: /&/,\n        alias: 'important'\n      },\n      'placeholder': /%[-\\w]+/,\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  },\n  'property': {\n    pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n    inside: {\n      'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    }\n  }\n});\nPrism.languages.insertBefore('scss', 'atrule', {\n  'keyword': [/@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i, {\n    pattern: /( +)(?:from|through)(?= )/,\n    lookbehind: true\n  }]\n});\nPrism.languages.insertBefore('scss', 'important', {\n  // var and interpolated vars\n  'variable': /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n});\nPrism.languages.insertBefore('scss', 'function', {\n  'placeholder': {\n    pattern: /%[-\\w]+/,\n    alias: 'selector'\n  },\n  'statement': {\n    pattern: /\\B!(?:default|optional)\\b/i,\n    alias: 'keyword'\n  },\n  'boolean': /\\b(?:true|false)\\b/,\n  'null': {\n    pattern: /\\bnull\\b/,\n    alias: 'keyword'\n  },\n  'operator': {\n    pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n    lookbehind: true\n  }\n});\nPrism.languages.scss['atrule'].inside.rest = Prism.languages.scss;\n/* \"prismjs/components/prism-sql\" */\n\nPrism.languages.sql = {\n  'comment': {\n    pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|(?:--|\\/\\/|#).*)/,\n    lookbehind: true\n  },\n  'variable': [{\n    pattern: /@([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1/,\n    greedy: true\n  }, /@[\\w.$]+/],\n  'string': {\n    pattern: /(^|[^@\\\\])(\"|')(?:\\\\[\\s\\S]|(?!\\2)[^\\\\]|\\2\\2)*\\2/,\n    greedy: true,\n    lookbehind: true\n  },\n  'function': /\\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\\s*\\()/i,\n  // Should we highlight user defined functions too?\n  'keyword': /\\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\\b/i,\n  'boolean': /\\b(?:TRUE|FALSE|NULL)\\b/i,\n  'number': /\\b0x[\\da-f]+\\b|\\b\\d+\\.?\\d*|\\B\\.\\d+\\b/i,\n  'operator': /[-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\\b/i,\n  'punctuation': /[;[\\]()`,.]/\n};\n/* \"prismjs/components/prism-stylus\" */\n\n(function (Prism) {\n  var inside = {\n    'url': /url\\(([\"']?).*?\\1\\)/i,\n    'string': {\n      pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n      greedy: true\n    },\n    'interpolation': null,\n    // See below\n    'func': null,\n    // See below\n    'important': /\\B!(?:important|optional)\\b/i,\n    'keyword': {\n      pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n      lookbehind: true\n    },\n    'hexcode': /#[\\da-f]{3,6}/i,\n    'number': /\\b\\d+(?:\\.\\d+)?%?/,\n    'boolean': /\\b(?:true|false)\\b/,\n    'operator': [// We want non-word chars around \"-\" because it is\n    // accepted in property names.\n    /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n    'punctuation': /[{}()\\[\\];:,]/\n  };\n  inside['interpolation'] = {\n    pattern: /\\{[^\\r\\n}:]+\\}/,\n    alias: 'variable',\n    inside: {\n      'delimiter': {\n        pattern: /^{|}$/,\n        alias: 'punctuation'\n      },\n      rest: inside\n    }\n  };\n  inside['func'] = {\n    pattern: /[\\w-]+\\([^)]*\\).*/,\n    inside: {\n      'function': /^[^(]+/,\n      rest: inside\n    }\n  };\n  Prism.languages.stylus = {\n    'comment': {\n      pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    'atrule-declaration': {\n      pattern: /(^\\s*)@.+/m,\n      lookbehind: true,\n      inside: {\n        'atrule': /^@[\\w-]+/,\n        rest: inside\n      }\n    },\n    'variable-declaration': {\n      pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n      lookbehind: true,\n      inside: {\n        'variable': /^\\S+/,\n        rest: inside\n      }\n    },\n    'statement': {\n      pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n      lookbehind: true,\n      inside: {\n        keyword: /^\\S+/,\n        rest: inside\n      }\n    },\n    // A property/value pair cannot end with a comma or a brace\n    // It cannot have indented content unless it ended with a semicolon\n    'property-declaration': {\n      pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'property': {\n          pattern: /^[^\\s:]+/,\n          inside: {\n            'interpolation': inside.interpolation\n          }\n        },\n        rest: inside\n      }\n    },\n    // A selector can contain parentheses only as part of a pseudo-element\n    // It can span multiple lines.\n    // It must end with a comma or an accolade or have indented content.\n    'selector': {\n      pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n      lookbehind: true,\n      inside: {\n        'interpolation': inside.interpolation,\n        'punctuation': /[{},]/\n      }\n    },\n    'func': inside.func,\n    'string': inside.string,\n    'interpolation': inside.interpolation,\n    'punctuation': /[{}()\\[\\];:.]/\n  };\n})(Prism);\n/* \"prismjs/components/prism-tsx\" */\n\n\nvar typescript = Prism.util.clone(Prism.languages.typescript);\nPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n/* \"prismjs/components/prism-wasm\" */\n\nPrism.languages.wasm = {\n  'comment': [/\\(;[\\s\\S]*?;\\)/, {\n    pattern: /;;.*/,\n    greedy: true\n  }],\n  'string': {\n    pattern: /\"(?:\\\\[\\s\\S]|[^\"\\\\])*\"/,\n    greedy: true\n  },\n  'keyword': [{\n    pattern: /\\b(?:align|offset)=/,\n    inside: {\n      'operator': /=/\n    }\n  }, {\n    pattern: /\\b(?:(?:f32|f64|i32|i64)(?:\\.(?:abs|add|and|ceil|clz|const|convert_[su]\\/i(?:32|64)|copysign|ctz|demote\\/f64|div(?:_[su])?|eqz?|extend_[su]\\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\\/f32|reinterpret\\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\\/f(?:32|64))?|wrap\\/i64|xor))?|memory\\.(?:grow|size))\\b/,\n    inside: {\n      'punctuation': /\\./\n    }\n  }, /\\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\\b/],\n  'variable': /\\$[\\w!#$%&'*+\\-./:<=>?@\\\\^_`|~]+/i,\n  'number': /[+-]?\\b(?:\\d(?:_?\\d)*(?:\\.\\d(?:_?\\d)*)?(?:[eE][+-]?\\d(?:_?\\d)*)?|0x[\\da-fA-F](?:_?[\\da-fA-F])*(?:\\.[\\da-fA-F](?:_?[\\da-fA-D])*)?(?:[pP][+-]?\\d(?:_?\\d)*)?)\\b|\\binf\\b|\\bnan(?::0x[\\da-fA-F](?:_?[\\da-fA-D])*)?\\b/,\n  'punctuation': /[()]/\n};\n/* \"prismjs/components/prism-yaml\" */\n\nPrism.languages.yaml = {\n  'scalar': {\n    pattern: /([\\-:]\\s*(?:![^\\s]+)?[ \\t]*[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/,\n    lookbehind: true,\n    alias: 'string'\n  },\n  'comment': /#.*/,\n  'key': {\n    pattern: /(\\s*(?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:![^\\s]+)?[ \\t]*)[^\\r\\n{[\\]},#\\s]+?(?=\\s*:\\s)/,\n    lookbehind: true,\n    alias: 'atrule'\n  },\n  'directive': {\n    pattern: /(^[ \\t]*)%.+/m,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'datetime': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?)(?=[ \\t]*(?:$|,|]|}))/m,\n    lookbehind: true,\n    alias: 'number'\n  },\n  'boolean': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:true|false)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'null': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(?:null|~)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true,\n    alias: 'important'\n  },\n  'string': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)(\"|')(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2(?=[ \\t]*(?:$|,|]|}|\\s*#))/m,\n    lookbehind: true,\n    greedy: true\n  },\n  'number': {\n    pattern: /([:\\-,[{]\\s*(?:![^\\s]+)?[ \\t]*)[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)[ \\t]*(?=$|,|]|})/im,\n    lookbehind: true\n  },\n  'tag': /![^\\s]+/,\n  'important': /[&*][\\w]+/,\n  'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n};\nPrism.languages.yml = Prism.languages.yaml;\n\nexport default Prism;\n"]},"metadata":{},"sourceType":"module"}